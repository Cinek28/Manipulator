
C:\Users\Cinek\Documents\STMicroelectronics\Projekty\Manipulator\Debug\Manipulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c64  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003dec  08003dec  00013dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003dfc  08003dfc  00013dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003e00  08003e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20000000  08003e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
  7 .bss          000000bc  20000020  20000020  00020020  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000dc  200000dc  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000852d  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000013b9  00000000  00000000  0002857d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000998  00000000  00000000  00029938  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d0  00000000  00000000  0002a2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003349  00000000  00000000  0002aba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e27  00000000  00000000  0002dee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00030d10  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002918  00000000  00000000  00030d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000336a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003dd4 	.word	0x08003dd4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08003dd4 	.word	0x08003dd4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80009a4:	4a06      	ldr	r2, [pc, #24]	; (80009c0 <NVIC_PriorityGroupConfig+0x24>)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b0:	60d3      	str	r3, [r2, #12]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	2300      	movs	r3, #0
 80009d2:	73bb      	strb	r3, [r7, #14]
 80009d4:	230f      	movs	r3, #15
 80009d6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	78db      	ldrb	r3, [r3, #3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d038      	beq.n	8000a52 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <NVIC_Init+0xbc>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	43db      	mvns	r3, r3
 80009e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	f1c3 0304 	rsb	r3, r3, #4
 80009f4:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80009f6:	7b7a      	ldrb	r2, [r7, #13]
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	fa42 f303 	asr.w	r3, r2, r3
 80009fe:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	785b      	ldrb	r3, [r3, #1]
 8000a04:	461a      	mov	r2, r3
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	789a      	ldrb	r2, [r3, #2]
 8000a12:	7b7b      	ldrb	r3, [r7, #13]
 8000a14:	4013      	ands	r3, r2
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
 8000a20:	011b      	lsls	r3, r3, #4
 8000a22:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <NVIC_Init+0xc0>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	7bfa      	ldrb	r2, [r7, #15]
 8000a2e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <NVIC_Init+0xc0>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	095b      	lsrs	r3, r3, #5
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	f003 031f 	and.w	r3, r3, #31
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a4c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a50:	e00f      	b.n	8000a72 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a52:	490c      	ldr	r1, [pc, #48]	; (8000a84 <NVIC_Init+0xc0>)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	095b      	lsrs	r3, r3, #5
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	f003 031f 	and.w	r3, r3, #31
 8000a66:	2201      	movs	r2, #1
 8000a68:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a6a:	f100 0320 	add.w	r3, r0, #32
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	e000ed00 	.word	0xe000ed00
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <CAN_DeInit+0x44>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d10a      	bne.n	8000aae <CAN_DeInit+0x26>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000a9e:	f000 fedd 	bl	800185c <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000aa8:	f000 fed8 	bl	800185c <RCC_APB1PeriphResetCmd>
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
  }
}
 8000aac:	e009      	b.n	8000ac2 <CAN_DeInit+0x3a>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8000aae:	2101      	movs	r1, #1
 8000ab0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ab4:	f000 fed2 	bl	800185c <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000abe:	f000 fecd 	bl	800185c <RCC_APB1PeriphResetCmd>
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40006400 	.word	0x40006400

08000ad0 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000ada:	2300      	movs	r3, #0
 8000adc:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f023 0202 	bic.w	r2, r3, #2
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f043 0201 	orr.w	r2, r3, #1
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000afa:	e002      	b.n	8000b02 <CAN_Init+0x32>
  {
    wait_ack++;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d104      	bne.n	8000b18 <CAN_Init+0x48>
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d1f1      	bne.n	8000afc <CAN_Init+0x2c>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e09c      	b.n	8000c64 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	799b      	ldrb	r3, [r3, #6]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d106      	bne.n	8000b40 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e005      	b.n	8000b4c <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	79db      	ldrb	r3, [r3, #7]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d106      	bne.n	8000b62 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	e005      	b.n	8000b6e <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	7a1b      	ldrb	r3, [r3, #8]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d106      	bne.n	8000b84 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f043 0220 	orr.w	r2, r3, #32
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	e005      	b.n	8000b90 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f023 0220 	bic.w	r2, r3, #32
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	7a5b      	ldrb	r3, [r3, #9]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d106      	bne.n	8000ba6 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f043 0210 	orr.w	r2, r3, #16
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	e005      	b.n	8000bb2 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f023 0210 	bic.w	r2, r3, #16
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	7a9b      	ldrb	r3, [r3, #10]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d106      	bne.n	8000bc8 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f043 0208 	orr.w	r2, r3, #8
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e005      	b.n	8000bd4 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f023 0208 	bic.w	r2, r3, #8
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	7adb      	ldrb	r3, [r3, #11]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d106      	bne.n	8000bea <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f043 0204 	orr.w	r2, r3, #4
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	e005      	b.n	8000bf6 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f023 0204 	bic.w	r2, r3, #4
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	78db      	ldrb	r3, [r3, #3]
 8000c00:	061b      	lsls	r3, r3, #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000c02:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	791b      	ldrb	r3, [r3, #4]
 8000c08:	041b      	lsls	r3, r3, #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000c0a:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	051b      	lsls	r3, r3, #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000c12:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000c1a:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f023 0201 	bic.w	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c30:	e002      	b.n	8000c38 <CAN_Init+0x168>
   {
     wait_ack++;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	3301      	adds	r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d004      	beq.n	8000c4e <CAN_Init+0x17e>
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d1f1      	bne.n	8000c32 <CAN_Init+0x162>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	73fb      	strb	r3, [r7, #15]
 8000c5e:	e001      	b.n	8000c64 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	7a9b      	ldrb	r3, [r3, #10]
 8000c84:	461a      	mov	r2, r3
 8000c86:	2301      	movs	r3, #1
 8000c88:	4093      	lsls	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000c8c:	4a56      	ldr	r2, [pc, #344]	; (8000de8 <CAN_FilterInit+0x174>)
 8000c8e:	4b56      	ldr	r3, [pc, #344]	; (8000de8 <CAN_FilterInit+0x174>)
 8000c90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000c9c:	4952      	ldr	r1, [pc, #328]	; (8000de8 <CAN_FilterInit+0x174>)
 8000c9e:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <CAN_FilterInit+0x174>)
 8000ca0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	4013      	ands	r3, r2
 8000caa:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	7b1b      	ldrb	r3, [r3, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d125      	bne.n	8000d02 <CAN_FilterInit+0x8e>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000cb6:	494c      	ldr	r1, [pc, #304]	; (8000de8 <CAN_FilterInit+0x174>)
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <CAN_FilterInit+0x174>)
 8000cba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000cc8:	4947      	ldr	r1, [pc, #284]	; (8000de8 <CAN_FilterInit+0x174>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7a9b      	ldrb	r3, [r3, #10]
 8000cce:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	88db      	ldrh	r3, [r3, #6]
 8000cd4:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	8852      	ldrh	r2, [r2, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000cda:	431a      	orrs	r2, r3
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000cdc:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000ce0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000ce4:	4940      	ldr	r1, [pc, #256]	; (8000de8 <CAN_FilterInit+0x174>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	7a9b      	ldrb	r3, [r3, #10]
 8000cea:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	889b      	ldrh	r3, [r3, #4]
 8000cf0:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	8812      	ldrh	r2, [r2, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000cf6:	431a      	orrs	r2, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000cf8:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000cfc:	00db      	lsls	r3, r3, #3
 8000cfe:	440b      	add	r3, r1
 8000d00:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	7b1b      	ldrb	r3, [r3, #12]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d124      	bne.n	8000d54 <CAN_FilterInit+0xe0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000d0a:	4937      	ldr	r1, [pc, #220]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d1a:	4933      	ldr	r1, [pc, #204]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	7a9b      	ldrb	r3, [r3, #10]
 8000d20:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	8852      	ldrh	r2, [r2, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000d2c:	431a      	orrs	r2, r3
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000d2e:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000d32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000d36:	492c      	ldr	r1, [pc, #176]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	7a9b      	ldrb	r3, [r3, #10]
 8000d3c:	4618      	mov	r0, r3
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	889b      	ldrh	r3, [r3, #4]
 8000d42:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	88d2      	ldrh	r2, [r2, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000d48:	431a      	orrs	r2, r3
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000d4a:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000d4e:	00db      	lsls	r3, r3, #3
 8000d50:	440b      	add	r3, r1
 8000d52:	605a      	str	r2, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7adb      	ldrb	r3, [r3, #11]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d109      	bne.n	8000d70 <CAN_FilterInit+0xfc>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000d5c:	4922      	ldr	r1, [pc, #136]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8000d6e:	e007      	b.n	8000d80 <CAN_FilterInit+0x10c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000d70:	491d      	ldr	r1, [pc, #116]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	891b      	ldrh	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d108      	bne.n	8000d9a <CAN_FilterInit+0x126>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000d88:	4917      	ldr	r1, [pc, #92]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <CAN_FilterInit+0x174>)
 8000d8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	4013      	ands	r3, r2
 8000d96:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	891b      	ldrh	r3, [r3, #8]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d107      	bne.n	8000db2 <CAN_FilterInit+0x13e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000da2:	4911      	ldr	r1, [pc, #68]	; (8000de8 <CAN_FilterInit+0x174>)
 8000da4:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <CAN_FilterInit+0x174>)
 8000da6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7b5b      	ldrb	r3, [r3, #13]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d107      	bne.n	8000dca <CAN_FilterInit+0x156>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000dba:	490b      	ldr	r1, [pc, #44]	; (8000de8 <CAN_FilterInit+0x174>)
 8000dbc:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <CAN_FilterInit+0x174>)
 8000dbe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000dca:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <CAN_FilterInit+0x174>)
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <CAN_FilterInit+0x174>)
 8000dce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000dd2:	f023 0301 	bic.w	r3, r3, #1
 8000dd6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40006400 	.word	0x40006400

08000dec <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	460b      	mov	r3, r1
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	331b      	adds	r3, #27
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7a1b      	ldrb	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d109      	bne.n	8000e2e <CAN_Receive+0x42>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000e1a:	7afb      	ldrb	r3, [r7, #11]
 8000e1c:	68fa      	ldr	r2, [r7, #12]
 8000e1e:	331b      	adds	r3, #27
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	4413      	add	r3, r2
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	0d5a      	lsrs	r2, r3, #21
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e008      	b.n	8000e40 <CAN_Receive+0x54>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	331b      	adds	r3, #27
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	4413      	add	r3, r2
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000e40:	7afb      	ldrb	r3, [r7, #11]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	331b      	adds	r3, #27
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	4413      	add	r3, r2
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000e58:	7afb      	ldrb	r3, [r7, #11]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	331b      	adds	r3, #27
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4413      	add	r3, r2
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f003 030f 	and.w	r3, r3, #15
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	331b      	adds	r3, #27
 8000e78:	011b      	lsls	r3, r3, #4
 8000e7a:	4413      	add	r3, r2
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000e9c:	7afb      	ldrb	r3, [r7, #11]
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0c1b      	lsrs	r3, r3, #16
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4413      	add	r3, r2
 8000ed0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0e1b      	lsrs	r3, r3, #24
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000ef2:	7afb      	ldrb	r3, [r7, #11]
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	4413      	add	r3, r2
 8000efa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000f08:	7afb      	ldrb	r3, [r7, #11]
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000f1e:	7afb      	ldrb	r3, [r7, #11]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	011b      	lsls	r3, r3, #4
 8000f24:	4413      	add	r3, r2
 8000f26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0e1b      	lsrs	r3, r3, #24
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000f34:	7afb      	ldrb	r3, [r7, #11]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d106      	bne.n	8000f48 <CAN_Receive+0x15c>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	f043 0220 	orr.w	r2, r3, #32
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000f46:	e005      	b.n	8000f54 <CAN_Receive+0x168>
    CANx->RF0R |= CAN_RF0R_RFOM0;
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	691b      	ldr	r3, [r3, #16]
 8000f4c:	f043 0220 	orr.w	r2, r3, #32
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  }
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f6e:	79fb      	ldrb	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d006      	beq.n	8000f82 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	695a      	ldr	r2, [r3, #20]
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8000f80:	e006      	b.n	8000f90 <CAN_ITConfig+0x30>
    CANx->IER |= CAN_IT;
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	615a      	str	r2, [r3, #20]
  }
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	695a      	ldr	r2, [r3, #20]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80b2 	beq.w	800111c <CAN_GetITStatus+0x180>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	2b40      	cmp	r3, #64	; 0x40
 8000fbc:	d062      	beq.n	8001084 <CAN_GetITStatus+0xe8>
 8000fbe:	2b40      	cmp	r3, #64	; 0x40
 8000fc0:	d80f      	bhi.n	8000fe2 <CAN_GetITStatus+0x46>
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d03a      	beq.n	800103c <CAN_GetITStatus+0xa0>
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	d804      	bhi.n	8000fd4 <CAN_GetITStatus+0x38>
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d024      	beq.n	8001018 <CAN_GetITStatus+0x7c>
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d02b      	beq.n	800102a <CAN_GetITStatus+0x8e>
 8000fd2:	e09f      	b.n	8001114 <CAN_GetITStatus+0x178>
 8000fd4:	2b10      	cmp	r3, #16
 8000fd6:	d043      	beq.n	8001060 <CAN_GetITStatus+0xc4>
 8000fd8:	2b20      	cmp	r3, #32
 8000fda:	d04a      	beq.n	8001072 <CAN_GetITStatus+0xd6>
 8000fdc:	2b08      	cmp	r3, #8
 8000fde:	d036      	beq.n	800104e <CAN_GetITStatus+0xb2>
 8000fe0:	e098      	b.n	8001114 <CAN_GetITStatus+0x178>
 8000fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fe6:	f000 8083 	beq.w	80010f0 <CAN_GetITStatus+0x154>
 8000fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fee:	d809      	bhi.n	8001004 <CAN_GetITStatus+0x68>
 8000ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ff4:	d06a      	beq.n	80010cc <CAN_GetITStatus+0x130>
 8000ff6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ffa:	d070      	beq.n	80010de <CAN_GetITStatus+0x142>
 8000ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001000:	d05b      	beq.n	80010ba <CAN_GetITStatus+0x11e>
 8001002:	e087      	b.n	8001114 <CAN_GetITStatus+0x178>
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d045      	beq.n	8001096 <CAN_GetITStatus+0xfa>
 800100a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800100e:	d04b      	beq.n	80010a8 <CAN_GetITStatus+0x10c>
 8001010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001014:	d075      	beq.n	8001102 <CAN_GetITStatus+0x166>
 8001016:	e07d      	b.n	8001114 <CAN_GetITStatus+0x178>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4943      	ldr	r1, [pc, #268]	; (800112c <CAN_GetITStatus+0x190>)
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f8f6 	bl	8001210 <CheckITStatus>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
        break;
 8001028:	e07a      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	2103      	movs	r1, #3
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8ed 	bl	8001210 <CheckITStatus>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
        break;
 800103a:	e071      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	2108      	movs	r1, #8
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f8e4 	bl	8001210 <CheckITStatus>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
        break;
 800104c:	e068      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	2110      	movs	r1, #16
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f8db 	bl	8001210 <CheckITStatus>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
        break;
 800105e:	e05f      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2103      	movs	r1, #3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f8d2 	bl	8001210 <CheckITStatus>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
        break;
 8001070:	e056      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	2108      	movs	r1, #8
 8001078:	4618      	mov	r0, r3
 800107a:	f000 f8c9 	bl	8001210 <CheckITStatus>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
        break;
 8001082:	e04d      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	2110      	movs	r1, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f8c0 	bl	8001210 <CheckITStatus>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
        break;
 8001094:	e044      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2108      	movs	r1, #8
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f8b7 	bl	8001210 <CheckITStatus>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
        break;
 80010a6:	e03b      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	2110      	movs	r1, #16
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 f8ae 	bl	8001210 <CheckITStatus>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
        break;
 80010b8:	e032      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f8a5 	bl	8001210 <CheckITStatus>
 80010c6:	4603      	mov	r3, r0
 80010c8:	73fb      	strb	r3, [r7, #15]
        break;
 80010ca:	e029      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2102      	movs	r1, #2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f89c 	bl	8001210 <CheckITStatus>
 80010d8:	4603      	mov	r3, r0
 80010da:	73fb      	strb	r3, [r7, #15]
        break;
 80010dc:	e020      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	699b      	ldr	r3, [r3, #24]
 80010e2:	2104      	movs	r1, #4
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f893 	bl	8001210 <CheckITStatus>
 80010ea:	4603      	mov	r3, r0
 80010ec:	73fb      	strb	r3, [r7, #15]
        break;
 80010ee:	e017      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2170      	movs	r1, #112	; 0x70
 80010f6:	4618      	mov	r0, r3
 80010f8:	f000 f88a 	bl	8001210 <CheckITStatus>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
        break;
 8001100:	e00e      	b.n	8001120 <CAN_GetITStatus+0x184>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2104      	movs	r1, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f881 	bl	8001210 <CheckITStatus>
 800110e:	4603      	mov	r3, r0
 8001110:	73fb      	strb	r3, [r7, #15]
        break;
 8001112:	e005      	b.n	8001120 <CAN_GetITStatus+0x184>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
        break;
 8001118:	bf00      	nop
 800111a:	e001      	b.n	8001120 <CAN_GetITStatus+0x184>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8001120:	7bfb      	ldrb	r3, [r7, #15]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	00010101 	.word	0x00010101

08001130 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001140:	d043      	beq.n	80011ca <CAN_ClearITPendingBit+0x9a>
 8001142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001146:	d80d      	bhi.n	8001164 <CAN_ClearITPendingBit+0x34>
 8001148:	2b08      	cmp	r3, #8
 800114a:	d02a      	beq.n	80011a2 <CAN_ClearITPendingBit+0x72>
 800114c:	2b08      	cmp	r3, #8
 800114e:	d804      	bhi.n	800115a <CAN_ClearITPendingBit+0x2a>
 8001150:	2b01      	cmp	r3, #1
 8001152:	d01e      	beq.n	8001192 <CAN_ClearITPendingBit+0x62>
 8001154:	2b04      	cmp	r3, #4
 8001156:	d020      	beq.n	800119a <CAN_ClearITPendingBit+0x6a>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001158:	e051      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800115a:	2b20      	cmp	r3, #32
 800115c:	d025      	beq.n	80011aa <CAN_ClearITPendingBit+0x7a>
 800115e:	2b40      	cmp	r3, #64	; 0x40
 8001160:	d027      	beq.n	80011b2 <CAN_ClearITPendingBit+0x82>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001162:	e04c      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8001164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001168:	d03b      	beq.n	80011e2 <CAN_ClearITPendingBit+0xb2>
 800116a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800116e:	d806      	bhi.n	800117e <CAN_ClearITPendingBit+0x4e>
 8001170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001174:	d02d      	beq.n	80011d2 <CAN_ClearITPendingBit+0xa2>
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d02e      	beq.n	80011da <CAN_ClearITPendingBit+0xaa>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 800117c:	e03f      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
{
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d01a      	beq.n	80011ba <CAN_ClearITPendingBit+0x8a>
 8001184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001188:	d01b      	beq.n	80011c2 <CAN_ClearITPendingBit+0x92>
 800118a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800118e:	d02f      	beq.n	80011f0 <CAN_ClearITPendingBit+0xc0>
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
    default:
       break;
 8001190:	e035      	b.n	80011fe <CAN_ClearITPendingBit+0xce>

  switch (CAN_IT)
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <CAN_ClearITPendingBit+0xdc>)
 8001196:	609a      	str	r2, [r3, #8]
      break;
 8001198:	e031      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2208      	movs	r2, #8
 800119e:	60da      	str	r2, [r3, #12]
      break;
 80011a0:	e02d      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2210      	movs	r2, #16
 80011a6:	60da      	str	r2, [r3, #12]
      break;
 80011a8:	e029      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2208      	movs	r2, #8
 80011ae:	611a      	str	r2, [r3, #16]
      break;
 80011b0:	e025      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2210      	movs	r2, #16
 80011b6:	611a      	str	r2, [r3, #16]
      break;
 80011b8:	e021      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2208      	movs	r2, #8
 80011be:	605a      	str	r2, [r3, #4]
      break;
 80011c0:	e01d      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2210      	movs	r2, #16
 80011c6:	605a      	str	r2, [r3, #4]
      break;
 80011c8:	e019      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2204      	movs	r2, #4
 80011ce:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 80011d0:	e015      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2204      	movs	r2, #4
 80011d6:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 80011d8:	e011      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2204      	movs	r2, #4
 80011de:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 80011e0:	e00d      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2204      	movs	r2, #4
 80011ec:	605a      	str	r2, [r3, #4]
      break;
 80011ee:	e006      	b.n	80011fe <CAN_ClearITPendingBit+0xce>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 80011fc:	bf00      	nop
    default:
       break;
   }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	00010101 	.word	0x00010101

08001210 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4013      	ands	r3, r2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3714      	adds	r7, #20
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr

08001240 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001240:	b480      	push	{r7}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
 800124e:	2300      	movs	r3, #0
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e076      	b.n	800134a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800125c:	2201      	movs	r2, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	429a      	cmp	r2, r3
 8001276:	d165      	bne.n	8001344 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	2103      	movs	r1, #3
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	401a      	ands	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	4619      	mov	r1, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	791b      	ldrb	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d003      	beq.n	80012b6 <GPIO_Init+0x76>
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d12e      	bne.n	8001314 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2103      	movs	r1, #3
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	401a      	ands	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	795b      	ldrb	r3, [r3, #5]
 80012d4:	4619      	mov	r1, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	431a      	orrs	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685a      	ldr	r2, [r3, #4]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2101      	movs	r1, #1
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	401a      	ands	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	799b      	ldrb	r3, [r3, #6]
 8001302:	4619      	mov	r1, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	b29b      	uxth	r3, r3
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	b29b      	uxth	r3, r3
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	b29b      	uxth	r3, r3
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	2103      	movs	r1, #3
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68da      	ldr	r2, [r3, #12]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	79db      	ldrb	r3, [r3, #7]
 8001334:	4619      	mov	r1, r3
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d985      	bls.n	800125c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	831a      	strh	r2, [r3, #24]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop

0800137c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	835a      	strh	r2, [r3, #26]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop

0800139c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80013b4:	787a      	ldrb	r2, [r7, #1]
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	f003 0307 	and.w	r3, r3, #7
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80013c4:	887b      	ldrh	r3, [r7, #2]
 80013c6:	08db      	lsrs	r3, r3, #3
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80013dc:	887b      	ldrh	r3, [r7, #2]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	210f      	movs	r1, #15
 80013e6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	ea02 0103 	and.w	r1, r2, r3
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f100 0208 	add.w	r2, r0, #8
 80013f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80013fa:	887b      	ldrh	r3, [r7, #2]
 80013fc:	08db      	lsrs	r3, r3, #3
 80013fe:	b29b      	uxth	r3, r3
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3208      	adds	r2, #8
 8001406:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	b29b      	uxth	r3, r3
 8001416:	461a      	mov	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001422:	bf00      	nop
 8001424:	3714      	adds	r7, #20
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop

08001430 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <RCC_DeInit+0x50>)
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <RCC_DeInit+0x50>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <RCC_DeInit+0x50>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <RCC_DeInit+0x50>)
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <RCC_DeInit+0x50>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 8001450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001454:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <RCC_DeInit+0x50>)
 8001458:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <RCC_DeInit+0x54>)
 800145a:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <RCC_DeInit+0x50>)
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <RCC_DeInit+0x58>)
 8001460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <RCC_DeInit+0x50>)
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <RCC_DeInit+0x50>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <RCC_DeInit+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 8001476:	bf00      	nop
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40023800 	.word	0x40023800
 8001484:	24003010 	.word	0x24003010
 8001488:	20003000 	.word	0x20003000

0800148c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <RCC_HSEConfig+0x24>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <RCC_HSEConfig+0x24>)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	7013      	strb	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40023802 	.word	0x40023802

080014b4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80014be:	2300      	movs	r3, #0
 80014c0:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80014c2:	2300      	movs	r3, #0
 80014c4:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80014c6:	2031      	movs	r0, #49	; 0x31
 80014c8:	f000 f9e8 	bl	800189c <RCC_GetFlagStatus>
 80014cc:	4603      	mov	r3, r0
 80014ce:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3301      	adds	r3, #1
 80014d4:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80014dc:	d002      	beq.n	80014e4 <RCC_WaitForHSEStartUp+0x30>
 80014de:	79bb      	ldrb	r3, [r7, #6]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 80014e4:	2031      	movs	r0, #49	; 0x31
 80014e6:	f000 f9d9 	bl	800189c <RCC_GetFlagStatus>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 80014f0:	2301      	movs	r3, #1
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	e001      	b.n	80014fa <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 80014f6:	2300      	movs	r3, #0
 80014f8:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8001512:	490b      	ldr	r1, [pc, #44]	; (8001540 <RCC_PLLConfig+0x3c>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	019a      	lsls	r2, r3, #6
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	431a      	orrs	r2, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	3b01      	subs	r3, #1
 8001522:	041b      	lsls	r3, r3, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	061b      	lsls	r3, r3, #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
                 (PLLQ << 24);
}
 8001532:	bf00      	nop
 8001534:	3714      	adds	r7, #20
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800

08001544 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <RCC_PLLCmd+0x1c>)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	42470060 	.word	0x42470060

08001564 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <RCC_SYSCLKConfig+0x34>)
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f023 0303 	bic.w	r3, r3, #3
 800157c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4313      	orrs	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <RCC_SYSCLKConfig+0x34>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	6093      	str	r3, [r2, #8]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	40023800 	.word	0x40023800

0800159c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <RCC_HCLKConfig+0x34>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015b4:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80015b6:	68fa      	ldr	r2, [r7, #12]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <RCC_HCLKConfig+0x34>)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6093      	str	r3, [r2, #8]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40023800 	.word	0x40023800

080015d4 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <RCC_PCLK1Config+0x34>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <RCC_PCLK1Config+0x34>)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6093      	str	r3, [r2, #8]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40023800 	.word	0x40023800

0800160c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <RCC_PCLK2Config+0x38>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001624:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <RCC_PCLK2Config+0x38>)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6093      	str	r3, [r2, #8]
}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	2302      	movs	r3, #2
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	2302      	movs	r3, #2
 8001666:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001668:	4b48      	ldr	r3, [pc, #288]	; (800178c <RCC_GetClocksFreq+0x144>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d007      	beq.n	8001688 <RCC_GetClocksFreq+0x40>
 8001678:	2b08      	cmp	r3, #8
 800167a:	d009      	beq.n	8001690 <RCC_GetClocksFreq+0x48>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d13f      	bne.n	8001700 <RCC_GetClocksFreq+0xb8>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a43      	ldr	r2, [pc, #268]	; (8001790 <RCC_GetClocksFreq+0x148>)
 8001684:	601a      	str	r2, [r3, #0]
      break;
 8001686:	e03f      	b.n	8001708 <RCC_GetClocksFreq+0xc0>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a42      	ldr	r2, [pc, #264]	; (8001794 <RCC_GetClocksFreq+0x14c>)
 800168c:	601a      	str	r2, [r3, #0]
      break;
 800168e:	e03b      	b.n	8001708 <RCC_GetClocksFreq+0xc0>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001690:	4b3e      	ldr	r3, [pc, #248]	; (800178c <RCC_GetClocksFreq+0x144>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001698:	0d9b      	lsrs	r3, r3, #22
 800169a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800169c:	4b3b      	ldr	r3, [pc, #236]	; (800178c <RCC_GetClocksFreq+0x144>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00d      	beq.n	80016c8 <RCC_GetClocksFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80016ac:	4a39      	ldr	r2, [pc, #228]	; (8001794 <RCC_GetClocksFreq+0x14c>)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <RCC_GetClocksFreq+0x144>)
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016bc:	400b      	ands	r3, r1
 80016be:	099b      	lsrs	r3, r3, #6
 80016c0:	fb03 f302 	mul.w	r3, r3, r2
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	e00c      	b.n	80016e2 <RCC_GetClocksFreq+0x9a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80016c8:	4a31      	ldr	r2, [pc, #196]	; (8001790 <RCC_GetClocksFreq+0x148>)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <RCC_GetClocksFreq+0x144>)
 80016d2:	6859      	ldr	r1, [r3, #4]
 80016d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d8:	400b      	ands	r3, r1
 80016da:	099b      	lsrs	r3, r3, #6
 80016dc:	fb03 f302 	mul.w	r3, r3, r2
 80016e0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <RCC_GetClocksFreq+0x144>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016ea:	0c1b      	lsrs	r3, r3, #16
 80016ec:	3301      	adds	r3, #1
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
      break;
 80016fe:	e003      	b.n	8001708 <RCC_GetClocksFreq+0xc0>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a23      	ldr	r2, [pc, #140]	; (8001790 <RCC_GetClocksFreq+0x148>)
 8001704:	601a      	str	r2, [r3, #0]
      break;
 8001706:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <RCC_GetClocksFreq+0x144>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001710:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001718:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <RCC_GetClocksFreq+0x150>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4413      	add	r3, r2
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	40da      	lsrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <RCC_GetClocksFreq+0x144>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001738:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	0a9b      	lsrs	r3, r3, #10
 800173e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <RCC_GetClocksFreq+0x150>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4413      	add	r3, r2
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685a      	ldr	r2, [r3, #4]
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	40da      	lsrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <RCC_GetClocksFreq+0x144>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001760:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	0b5b      	lsrs	r3, r3, #13
 8001766:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001768:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <RCC_GetClocksFreq+0x150>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	40da      	lsrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
}
 8001780:	bf00      	nop
 8001782:	3724      	adds	r7, #36	; 0x24
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40023800 	.word	0x40023800
 8001790:	00f42400 	.word	0x00f42400
 8001794:	007a1200 	.word	0x007a1200
 8001798:	20000000 	.word	0x20000000

0800179c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017a8:	78fb      	ldrb	r3, [r7, #3]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d006      	beq.n	80017bc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80017ae:	490a      	ldr	r1, [pc, #40]	; (80017d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80017b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80017ba:	e006      	b.n	80017ca <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80017bc:	4906      	ldr	r1, [pc, #24]	; (80017d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80017c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	4013      	ands	r3, r2
 80017c8:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80017ee:	490a      	ldr	r1, [pc, #40]	; (8001818 <RCC_APB1PeriphClockCmd+0x3c>)
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <RCC_APB1PeriphClockCmd+0x3c>)
 80017f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80017fa:	e006      	b.n	800180a <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80017fc:	4906      	ldr	r1, [pc, #24]	; (8001818 <RCC_APB1PeriphClockCmd+0x3c>)
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <RCC_APB1PeriphClockCmd+0x3c>)
 8001800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	43db      	mvns	r3, r3
 8001806:	4013      	ands	r3, r2
 8001808:	640b      	str	r3, [r1, #64]	; 0x40
  }
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40023800 	.word	0x40023800

0800181c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800182e:	490a      	ldr	r1, [pc, #40]	; (8001858 <RCC_APB2PeriphClockCmd+0x3c>)
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <RCC_APB2PeriphClockCmd+0x3c>)
 8001832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4313      	orrs	r3, r2
 8001838:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800183a:	e006      	b.n	800184a <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800183c:	4906      	ldr	r1, [pc, #24]	; (8001858 <RCC_APB2PeriphClockCmd+0x3c>)
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <RCC_APB2PeriphClockCmd+0x3c>)
 8001840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	43db      	mvns	r3, r3
 8001846:	4013      	ands	r3, r2
 8001848:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800186e:	490a      	ldr	r1, [pc, #40]	; (8001898 <RCC_APB1PeriphResetCmd+0x3c>)
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <RCC_APB1PeriphResetCmd+0x3c>)
 8001872:	6a1a      	ldr	r2, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4313      	orrs	r3, r2
 8001878:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 800187a:	e006      	b.n	800188a <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800187c:	4906      	ldr	r1, [pc, #24]	; (8001898 <RCC_APB1PeriphResetCmd+0x3c>)
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <RCC_APB1PeriphResetCmd+0x3c>)
 8001880:	6a1a      	ldr	r2, [r3, #32]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	43db      	mvns	r3, r3
 8001886:	4013      	ands	r3, r2
 8001888:	620b      	str	r3, [r1, #32]
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	095b      	lsrs	r3, r3, #5
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d103      	bne.n	80018c8 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <RCC_GetFlagStatus+0x70>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e009      	b.n	80018dc <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d103      	bne.n	80018d6 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <RCC_GetFlagStatus+0x70>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	e002      	b.n	80018dc <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 80018d6:	4b0d      	ldr	r3, [pc, #52]	; (800190c <RCC_GetFlagStatus+0x70>)
 80018d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018da:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	fa22 f303 	lsr.w	r3, r2, r3
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80018f4:	2301      	movs	r3, #1
 80018f6:	74fb      	strb	r3, [r7, #19]
 80018f8:	e001      	b.n	80018fe <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80018fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8001900:	4618      	mov	r0, r3
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	40023800 	.word	0x40023800

08001910 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a29      	ldr	r2, [pc, #164]	; (80019cc <TIM_TimeBaseInit+0xbc>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <TIM_TimeBaseInit+0x44>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <TIM_TimeBaseInit+0xc0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00f      	beq.n	8001954 <TIM_TimeBaseInit+0x44>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d00b      	beq.n	8001954 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <TIM_TimeBaseInit+0xc4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <TIM_TimeBaseInit+0x44>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <TIM_TimeBaseInit+0xc8>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d003      	beq.n	8001954 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a23      	ldr	r2, [pc, #140]	; (80019dc <TIM_TimeBaseInit+0xcc>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d108      	bne.n	8001966 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800195a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	885a      	ldrh	r2, [r3, #2]
 8001960:	89fb      	ldrh	r3, [r7, #14]
 8001962:	4313      	orrs	r3, r2
 8001964:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <TIM_TimeBaseInit+0xd0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00c      	beq.n	8001988 <TIM_TimeBaseInit+0x78>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a1c      	ldr	r2, [pc, #112]	; (80019e4 <TIM_TimeBaseInit+0xd4>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d008      	beq.n	8001988 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800197c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	891a      	ldrh	r2, [r3, #8]
 8001982:	89fb      	ldrh	r3, [r7, #14]
 8001984:	4313      	orrs	r3, r2
 8001986:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	89fa      	ldrh	r2, [r7, #14]
 800198c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <TIM_TimeBaseInit+0xbc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d003      	beq.n	80019ae <TIM_TimeBaseInit+0x9e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a09      	ldr	r2, [pc, #36]	; (80019d0 <TIM_TimeBaseInit+0xc0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d104      	bne.n	80019b8 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	7a9b      	ldrb	r3, [r3, #10]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2201      	movs	r2, #1
 80019bc:	829a      	strh	r2, [r3, #20]
}
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40010000 	.word	0x40010000
 80019d0:	40010400 	.word	0x40010400
 80019d4:	40000400 	.word	0x40000400
 80019d8:	40000800 	.word	0x40000800
 80019dc:	40000c00 	.word	0x40000c00
 80019e0:	40001000 	.word	0x40001000
 80019e4:	40001400 	.word	0x40001400

080019e8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d008      	beq.n	8001a0c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001a0a:	e007      	b.n	8001a1c <TIM_Cmd+0x34>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	801a      	strh	r2, [r3, #0]
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	817b      	strh	r3, [r7, #10]
 8001a36:	2300      	movs	r3, #0
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	8c1b      	ldrh	r3, [r3, #32]
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8c1b      	ldrh	r3, [r3, #32]
 8001a52:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	889b      	ldrh	r3, [r3, #4]
 8001a58:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	8b1b      	ldrh	r3, [r3, #24]
 8001a5e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a66:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8001a68:	897b      	ldrh	r3, [r7, #10]
 8001a6a:	f023 0303 	bic.w	r3, r3, #3
 8001a6e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	897b      	ldrh	r3, [r7, #10]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8001a7a:	89fb      	ldrh	r3, [r7, #14]
 8001a7c:	f023 0302 	bic.w	r3, r3, #2
 8001a80:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	899a      	ldrh	r2, [r3, #12]
 8001a86:	89fb      	ldrh	r3, [r7, #14]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	885a      	ldrh	r2, [r3, #2]
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <TIM_OC1Init+0xec>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d003      	beq.n	8001aa6 <TIM_OC1Init+0x7e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a1d      	ldr	r2, [pc, #116]	; (8001b18 <TIM_OC1Init+0xf0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d123      	bne.n	8001aee <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8001aa6:	89fb      	ldrh	r3, [r7, #14]
 8001aa8:	f023 0308 	bic.w	r3, r3, #8
 8001aac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	89da      	ldrh	r2, [r3, #14]
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	f023 0304 	bic.w	r3, r3, #4
 8001abe:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	889a      	ldrh	r2, [r3, #4]
 8001ac4:	89fb      	ldrh	r3, [r7, #14]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8001aca:	89bb      	ldrh	r3, [r7, #12]
 8001acc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001ad2:	89bb      	ldrh	r3, [r7, #12]
 8001ad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ad8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	8a1a      	ldrh	r2, [r3, #16]
 8001ade:	89bb      	ldrh	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	8a5a      	ldrh	r2, [r3, #18]
 8001ae8:	89bb      	ldrh	r3, [r7, #12]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	89ba      	ldrh	r2, [r7, #12]
 8001af2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	897a      	ldrh	r2, [r7, #10]
 8001af8:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	89fa      	ldrh	r2, [r7, #14]
 8001b06:	841a      	strh	r2, [r3, #32]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	40010000 	.word	0x40010000
 8001b18:	40010400 	.word	0x40010400

08001b1c <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	81fb      	strh	r3, [r7, #14]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	8c1b      	ldrh	r3, [r3, #32]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	f023 0310 	bic.w	r3, r3, #16
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	8c1b      	ldrh	r3, [r3, #32]
 8001b46:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8b1b      	ldrh	r3, [r3, #24]
 8001b52:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b5a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001b5c:	897b      	ldrh	r3, [r7, #10]
 8001b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b62:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001b72:	89fb      	ldrh	r3, [r7, #14]
 8001b74:	f023 0320 	bic.w	r3, r3, #32
 8001b78:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	899b      	ldrh	r3, [r3, #12]
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	89fb      	ldrh	r3, [r7, #14]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	885b      	ldrh	r3, [r3, #2]
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	b29a      	uxth	r2, r3
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <TIM_OC2Init+0x108>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d003      	beq.n	8001ba6 <TIM_OC2Init+0x8a>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <TIM_OC2Init+0x10c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d12b      	bne.n	8001bfe <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	89db      	ldrh	r3, [r3, #14]
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	89fb      	ldrh	r3, [r7, #14]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001bbc:	89fb      	ldrh	r3, [r7, #14]
 8001bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bc2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	889b      	ldrh	r3, [r3, #4]
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8001bd2:	89bb      	ldrh	r3, [r7, #12]
 8001bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001bd8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8001bda:	89bb      	ldrh	r3, [r7, #12]
 8001bdc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001be0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	8a1b      	ldrh	r3, [r3, #16]
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	89bb      	ldrh	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	8a5b      	ldrh	r3, [r3, #18]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	89bb      	ldrh	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	89ba      	ldrh	r2, [r7, #12]
 8001c02:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	897a      	ldrh	r2, [r7, #10]
 8001c08:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	689a      	ldr	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	89fa      	ldrh	r2, [r7, #14]
 8001c16:	841a      	strh	r2, [r3, #32]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40010000 	.word	0x40010000
 8001c28:	40010400 	.word	0x40010400

08001c2c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	81fb      	strh	r3, [r7, #14]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	8c1b      	ldrh	r3, [r3, #32]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	8c1b      	ldrh	r3, [r3, #32]
 8001c56:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	889b      	ldrh	r3, [r3, #4]
 8001c5c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	8b9b      	ldrh	r3, [r3, #28]
 8001c62:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001c64:	897b      	ldrh	r3, [r7, #10]
 8001c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c6a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001c6c:	897b      	ldrh	r3, [r7, #10]
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001c7e:	89fb      	ldrh	r3, [r7, #14]
 8001c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c84:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	899b      	ldrh	r3, [r3, #12]
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	89fb      	ldrh	r3, [r7, #14]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	885b      	ldrh	r3, [r3, #2]
 8001c98:	021b      	lsls	r3, r3, #8
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <TIM_OC3Init+0x104>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d003      	beq.n	8001cb2 <TIM_OC3Init+0x86>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a21      	ldr	r2, [pc, #132]	; (8001d34 <TIM_OC3Init+0x108>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12b      	bne.n	8001d0a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001cb2:	89fb      	ldrh	r3, [r7, #14]
 8001cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cb8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	89db      	ldrh	r3, [r3, #14]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001cc8:	89fb      	ldrh	r3, [r7, #14]
 8001cca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001cce:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	889b      	ldrh	r3, [r3, #4]
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001cde:	89bb      	ldrh	r3, [r7, #12]
 8001ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ce4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001ce6:	89bb      	ldrh	r3, [r7, #12]
 8001ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001cec:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	8a1b      	ldrh	r3, [r3, #16]
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	89bb      	ldrh	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	8a5b      	ldrh	r3, [r3, #18]
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	89bb      	ldrh	r3, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	89ba      	ldrh	r2, [r7, #12]
 8001d0e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	897a      	ldrh	r2, [r7, #10]
 8001d14:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689a      	ldr	r2, [r3, #8]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	89fa      	ldrh	r2, [r7, #14]
 8001d22:	841a      	strh	r2, [r3, #32]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40010400 	.word	0x40010400

08001d38 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	81bb      	strh	r3, [r7, #12]
 8001d46:	2300      	movs	r3, #0
 8001d48:	817b      	strh	r3, [r7, #10]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	8c1b      	ldrh	r3, [r3, #32]
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	8c1b      	ldrh	r3, [r3, #32]
 8001d62:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	8b9b      	ldrh	r3, [r3, #28]
 8001d6e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001d70:	89bb      	ldrh	r3, [r7, #12]
 8001d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d76:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001d78:	89bb      	ldrh	r3, [r7, #12]
 8001d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	89bb      	ldrh	r3, [r7, #12]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001d8e:	897b      	ldrh	r3, [r7, #10]
 8001d90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d94:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	899b      	ldrh	r3, [r3, #12]
 8001d9a:	031b      	lsls	r3, r3, #12
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	885b      	ldrh	r3, [r3, #2]
 8001da8:	031b      	lsls	r3, r3, #12
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	897b      	ldrh	r3, [r7, #10]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <TIM_OC4Init+0xc8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d003      	beq.n	8001dc2 <TIM_OC4Init+0x8a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <TIM_OC4Init+0xcc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d10a      	bne.n	8001dd8 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001dc2:	89fb      	ldrh	r3, [r7, #14]
 8001dc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dc8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	8a1b      	ldrh	r3, [r3, #16]
 8001dce:	019b      	lsls	r3, r3, #6
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	89fb      	ldrh	r3, [r7, #14]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	89fa      	ldrh	r2, [r7, #14]
 8001ddc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	89ba      	ldrh	r2, [r7, #12]
 8001de2:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	897a      	ldrh	r2, [r7, #10]
 8001df0:	841a      	strh	r2, [r3, #32]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40010000 	.word	0x40010000
 8001e04:	40010400 	.word	0x40010400

08001e08 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	8b1b      	ldrh	r3, [r3, #24]
 8001e8c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001e8e:	89fb      	ldrh	r3, [r7, #14]
 8001e90:	f023 0308 	bic.w	r3, r3, #8
 8001e94:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8001e96:	89fa      	ldrh	r2, [r7, #14]
 8001e98:	887b      	ldrh	r3, [r7, #2]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	89fa      	ldrh	r2, [r7, #14]
 8001ea2:	831a      	strh	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	8b1b      	ldrh	r3, [r3, #24]
 8001ec4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
 8001ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ecc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	89fa      	ldrh	r2, [r7, #14]
 8001ede:	831a      	strh	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	8b9b      	ldrh	r3, [r3, #28]
 8001f00:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	f023 0308 	bic.w	r3, r3, #8
 8001f08:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001f0a:	89fa      	ldrh	r2, [r7, #14]
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	89fa      	ldrh	r2, [r7, #14]
 8001f16:	839a      	strh	r2, [r3, #28]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	8b9b      	ldrh	r3, [r3, #28]
 8001f38:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f40:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	89fb      	ldrh	r3, [r7, #14]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	89fa      	ldrh	r2, [r7, #14]
 8001f52:	839a      	strh	r2, [r3, #28]
}
 8001f54:	bf00      	nop
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08a      	sub	sp, #40	; 0x28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	8a1b      	ldrh	r3, [r3, #16]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	88db      	ldrh	r3, [r3, #6]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	899b      	ldrh	r3, [r3, #12]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fdc:	f023 030c 	bic.w	r3, r3, #12
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	889a      	ldrh	r2, [r3, #4]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	891b      	ldrh	r3, [r3, #8]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	b29a      	uxth	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	8a9b      	ldrh	r3, [r3, #20]
 800200a:	b29b      	uxth	r3, r3
 800200c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002014:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	899b      	ldrh	r3, [r3, #12]
 800201a:	461a      	mov	r2, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	4313      	orrs	r3, r2
 8002020:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	b29a      	uxth	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fb0a 	bl	8001648 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <USART_Init+0x168>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d003      	beq.n	8002044 <USART_Init+0xb4>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <USART_Init+0x16c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d102      	bne.n	800204a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	e001      	b.n	800204e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	899b      	ldrh	r3, [r3, #12]
 8002052:	b29b      	uxth	r3, r3
 8002054:	b21b      	sxth	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	da0c      	bge.n	8002074 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800205a:	6a3a      	ldr	r2, [r7, #32]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	009a      	lsls	r2, r3, #2
 8002064:	441a      	add	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e00b      	b.n	800208c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8002074:	6a3a      	ldr	r2, [r7, #32]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	009a      	lsls	r2, r3, #2
 800207e:	441a      	add	r2, r3
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	4a1c      	ldr	r2, [pc, #112]	; (8002100 <USART_Init+0x170>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	095b      	lsrs	r3, r3, #5
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	2264      	movs	r2, #100	; 0x64
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	899b      	ldrh	r3, [r3, #12]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	b21b      	sxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da0c      	bge.n	80020d0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	3332      	adds	r3, #50	; 0x32
 80020bc:	4a10      	ldr	r2, [pc, #64]	; (8002100 <USART_Init+0x170>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ca:	4313      	orrs	r3, r2
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	e00b      	b.n	80020e8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	3332      	adds	r3, #50	; 0x32
 80020d6:	4a0a      	ldr	r2, [pc, #40]	; (8002100 <USART_Init+0x170>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	4313      	orrs	r3, r2
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	811a      	strh	r2, [r3, #8]
}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40011000 	.word	0x40011000
 80020fc:	40011400 	.word	0x40011400
 8002100:	51eb851f 	.word	0x51eb851f

08002104 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	460b      	mov	r3, r1
 800210e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d008      	beq.n	8002128 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	899b      	ldrh	r3, [r3, #12]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002120:	b29a      	uxth	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8002126:	e007      	b.n	8002138 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	899b      	ldrh	r3, [r3, #12]
 800212c:	b29b      	uxth	r3, r3
 800212e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	819a      	strh	r2, [r3, #12]
  }
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002150:	887b      	ldrh	r3, [r7, #2]
 8002152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002156:	b29a      	uxth	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	809a      	strh	r2, [r3, #4]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	889b      	ldrh	r3, [r3, #4]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217a:	b29b      	uxth	r3, r3
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002194:	78fb      	ldrb	r3, [r7, #3]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8a9b      	ldrh	r3, [r3, #20]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	f043 0308 	orr.w	r3, r3, #8
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	829a      	strh	r2, [r3, #20]
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
  }
}
 80021aa:	e007      	b.n	80021bc <USART_HalfDuplexCmd+0x34>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8a9b      	ldrh	r3, [r3, #20]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f023 0308 	bic.w	r3, r3, #8
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	829a      	strh	r2, [r3, #20]
  }
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 80021d8:	2300      	movs	r3, #0
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	2300      	movs	r3, #0
 80021e2:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80021fe:	2201      	movs	r2, #1
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d103      	bne.n	8002216 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	330c      	adds	r3, #12
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	e009      	b.n	800222a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d103      	bne.n	8002224 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3310      	adds	r3, #16
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e002      	b.n	800222a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3314      	adds	r3, #20
 8002228:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800222a:	787b      	ldrb	r3, [r7, #1]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d006      	beq.n	800223e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	6811      	ldr	r1, [r2, #0]
 8002236:	68ba      	ldr	r2, [r7, #8]
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800223c:	e006      	b.n	800224c <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	6811      	ldr	r1, [r2, #0]
 8002244:	68ba      	ldr	r2, [r7, #8]
 8002246:	43d2      	mvns	r2, r2
 8002248:	400a      	ands	r2, r1
 800224a:	601a      	str	r2, [r3, #0]
  }
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	460b      	mov	r3, r1
 8002262:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	b29a      	uxth	r2, r3
 800226e:	887b      	ldrh	r3, [r7, #2]
 8002270:	4013      	ands	r3, r2
 8002272:	b29b      	uxth	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
 800227c:	e001      	b.n	8002282 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002282:	7bfb      	ldrb	r3, [r7, #15]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	460b      	mov	r3, r1
 800229a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80022a8:	2300      	movs	r3, #0
 80022aa:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	095b      	lsrs	r3, r3, #5
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80022b6:	887b      	ldrh	r3, [r7, #2]
 80022b8:	f003 031f 	and.w	r3, r3, #31
 80022bc:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80022be:	2201      	movs	r2, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d107      	bne.n	80022de <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	899b      	ldrh	r3, [r3, #12]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	461a      	mov	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	4013      	ands	r3, r2
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	e011      	b.n	8002302 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d107      	bne.n	80022f4 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8a1b      	ldrh	r3, [r3, #16]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4013      	ands	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e006      	b.n	8002302 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8a9b      	ldrh	r3, [r3, #20]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	4013      	ands	r3, r2
 8002300:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
 8002308:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800230a:	2201      	movs	r2, #1
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b29b      	uxth	r3, r3
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4013      	ands	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <USART_GetITStatus+0xa4>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 800232e:	2301      	movs	r3, #1
 8002330:	74fb      	strb	r3, [r7, #19]
 8002332:	e001      	b.n	8002338 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8002334:	2300      	movs	r3, #0
 8002336:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002338:	7cfb      	ldrb	r3, [r7, #19]
}
 800233a:	4618      	mov	r0, r3
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop

08002348 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002354:	2300      	movs	r3, #0
 8002356:	81fb      	strh	r3, [r7, #14]
 8002358:	2300      	movs	r3, #0
 800235a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800235c:	887b      	ldrh	r3, [r7, #2]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002362:	89fb      	ldrh	r3, [r7, #14]
 8002364:	2201      	movs	r2, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800236c:	89bb      	ldrh	r3, [r7, #12]
 800236e:	43db      	mvns	r3, r3
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	801a      	strh	r2, [r3, #0]
}
 8002376:	bf00      	nop
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop

08002384 <initCan>:
 *      Author: Konrad
 */

#include "CAN.h"

void initCan(void) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	; 0x28
 8002388:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;
	CAN_InitTypeDef CAN_InitStructure;
	CAN_FilterInitTypeDef CAN_FilterInitStructure;

	NVIC_InitStructure.NVIC_IRQChannel = CAN1_RX0_IRQn;
 800238a:	2314      	movs	r3, #20
 800238c:	773b      	strb	r3, [r7, #28]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0;
 800238e:	2300      	movs	r3, #0
 8002390:	777b      	strb	r3, [r7, #29]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0;
 8002392:	2300      	movs	r3, #0
 8002394:	77bb      	strb	r3, [r7, #30]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002396:	2301      	movs	r3, #1
 8002398:	77fb      	strb	r3, [r7, #31]
	NVIC_Init(&NVIC_InitStructure);
 800239a:	f107 031c 	add.w	r3, r7, #28
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fb10 	bl	80009c4 <NVIC_Init>

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80023a4:	2101      	movs	r1, #1
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff f9f8 	bl	800179c <RCC_AHB1PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 80023ac:	2101      	movs	r1, #1
 80023ae:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80023b2:	f7ff fa13 	bl	80017dc <RCC_APB1PeriphClockCmd>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_CAN1);
 80023b6:	2209      	movs	r2, #9
 80023b8:	210b      	movs	r1, #11
 80023ba:	4835      	ldr	r0, [pc, #212]	; (8002490 <initCan+0x10c>)
 80023bc:	f7fe ffee 	bl	800139c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource12, GPIO_AF_CAN1);
 80023c0:	2209      	movs	r2, #9
 80023c2:	210c      	movs	r1, #12
 80023c4:	4832      	ldr	r0, [pc, #200]	; (8002490 <initCan+0x10c>)
 80023c6:	f7fe ffe9 	bl	800139c <GPIO_PinAFConfig>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12;
 80023ca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80023ce:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80023d0:	2302      	movs	r3, #2
 80023d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80023d6:	2302      	movs	r3, #2
 80023d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80023dc:	2300      	movs	r3, #0
 80023de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80023e8:	f107 0320 	add.w	r3, r7, #32
 80023ec:	4619      	mov	r1, r3
 80023ee:	4828      	ldr	r0, [pc, #160]	; (8002490 <initCan+0x10c>)
 80023f0:	f7fe ff26 	bl	8001240 <GPIO_Init>

	CAN_InitStructure.CAN_TTCM = DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	75bb      	strb	r3, [r7, #22]
	CAN_InitStructure.CAN_ABOM = DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]
	CAN_InitStructure.CAN_AWUM = DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	763b      	strb	r3, [r7, #24]
	CAN_InitStructure.CAN_NART = ENABLE;
 8002400:	2301      	movs	r3, #1
 8002402:	767b      	strb	r3, [r7, #25]
	CAN_InitStructure.CAN_RFLM = DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	76bb      	strb	r3, [r7, #26]
	CAN_InitStructure.CAN_TXFP = DISABLE;
 8002408:	2300      	movs	r3, #0
 800240a:	76fb      	strb	r3, [r7, #27]
	CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
 800240c:	2300      	movs	r3, #0
 800240e:	74bb      	strb	r3, [r7, #18]
	CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
 8002410:	2300      	movs	r3, #0
 8002412:	74fb      	strb	r3, [r7, #19]
	//ustawienie predkosc tarnsmijsi
	CAN_InitStructure.CAN_BS1 = CAN_BS1_9tq;
 8002414:	2308      	movs	r3, #8
 8002416:	753b      	strb	r3, [r7, #20]
	CAN_InitStructure.CAN_BS2 = CAN_BS2_8tq;
 8002418:	2307      	movs	r3, #7
 800241a:	757b      	strb	r3, [r7, #21]
	CAN_InitStructure.CAN_Prescaler = 4;
 800241c:	2304      	movs	r3, #4
 800241e:	823b      	strh	r3, [r7, #16]

	//Filtry ustawione tak ze nic nie blokuja
	CAN_FilterInitStructure.CAN_FilterNumber = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	72bb      	strb	r3, [r7, #10]
	CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
 8002424:	2300      	movs	r3, #0
 8002426:	72fb      	strb	r3, [r7, #11]
	CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_16bit;
 8002428:	2300      	movs	r3, #0
 800242a:	733b      	strb	r3, [r7, #12]
	CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
 800242c:	2300      	movs	r3, #0
 800242e:	803b      	strh	r3, [r7, #0]
	CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
 8002430:	2300      	movs	r3, #0
 8002432:	807b      	strh	r3, [r7, #2]
	CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;
 8002434:	2300      	movs	r3, #0
 8002436:	80bb      	strh	r3, [r7, #4]
	CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
 8002438:	2300      	movs	r3, #0
 800243a:	80fb      	strh	r3, [r7, #6]
	CAN_FilterInitStructure.CAN_FilterFIFOAssignment = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	813b      	strh	r3, [r7, #8]
	CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
 8002440:	2301      	movs	r3, #1
 8002442:	737b      	strb	r3, [r7, #13]

	CAN_DeInit(CAN1);
 8002444:	4813      	ldr	r0, [pc, #76]	; (8002494 <initCan+0x110>)
 8002446:	f7fe fb1f 	bl	8000a88 <CAN_DeInit>
	CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);
 800244a:	2201      	movs	r2, #1
 800244c:	2102      	movs	r1, #2
 800244e:	4811      	ldr	r0, [pc, #68]	; (8002494 <initCan+0x110>)
 8002450:	f7fe fd86 	bl	8000f60 <CAN_ITConfig>
	CAN_Init(CAN1, &CAN_InitStructure);
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	4619      	mov	r1, r3
 800245a:	480e      	ldr	r0, [pc, #56]	; (8002494 <initCan+0x110>)
 800245c:	f7fe fb38 	bl	8000ad0 <CAN_Init>
	CAN_FilterInit(&CAN_FilterInitStructure);
 8002460:	463b      	mov	r3, r7
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fc06 	bl	8000c74 <CAN_FilterInit>

	/* Transmit Structure preparation */
	txMessage.StdId = 0x00;
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <initCan+0x114>)
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
	txMessage.ExtId = 0x00;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <initCan+0x114>)
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
	txMessage.RTR = CAN_RTR_DATA;
 8002474:	4b08      	ldr	r3, [pc, #32]	; (8002498 <initCan+0x114>)
 8002476:	2200      	movs	r2, #0
 8002478:	725a      	strb	r2, [r3, #9]
	txMessage.IDE = CAN_ID_STD;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <initCan+0x114>)
 800247c:	2200      	movs	r2, #0
 800247e:	721a      	strb	r2, [r3, #8]
	txMessage.DLC = 3;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <initCan+0x114>)
 8002482:	2203      	movs	r2, #3
 8002484:	729a      	strb	r2, [r3, #10]

}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	; 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40020000 	.word	0x40020000
 8002494:	40006400 	.word	0x40006400
 8002498:	20000054 	.word	0x20000054

0800249c <TIM1_BRK_TIM9_IRQHandler>:

volatile uint16_t period;
volatile uint16_t pulse;
volatile uint16_t duty;

void TIM1_BRK_TIM9_IRQHandler(void){
 800249c:	b598      	push	{r3, r4, r7, lr}
 800249e:	af00      	add	r7, sp, #0
	period = TIM_GetCapture1(TIM9);
 80024a0:	480f      	ldr	r0, [pc, #60]	; (80024e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80024a2:	f7ff fd5d 	bl	8001f60 <TIM_GetCapture1>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <TIM1_BRK_TIM9_IRQHandler+0x48>)
 80024ac:	801a      	strh	r2, [r3, #0]
	pulse= TIM_GetCapture2(TIM9);
 80024ae:	480c      	ldr	r0, [pc, #48]	; (80024e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80024b0:	f7ff fd62 	bl	8001f78 <TIM_GetCapture2>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <TIM1_BRK_TIM9_IRQHandler+0x4c>)
 80024ba:	801a      	strh	r2, [r3, #0]

	duty = (TIM_GetCapture2(TIM9) * 100) / TIM_GetCapture1(TIM9);
 80024bc:	4808      	ldr	r0, [pc, #32]	; (80024e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80024be:	f7ff fd5b 	bl	8001f78 <TIM_GetCapture2>
 80024c2:	4602      	mov	r2, r0
 80024c4:	2364      	movs	r3, #100	; 0x64
 80024c6:	fb03 f402 	mul.w	r4, r3, r2
 80024ca:	4805      	ldr	r0, [pc, #20]	; (80024e0 <TIM1_BRK_TIM9_IRQHandler+0x44>)
 80024cc:	f7ff fd48 	bl	8001f60 <TIM_GetCapture1>
 80024d0:	4603      	mov	r3, r0
 80024d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <TIM1_BRK_TIM9_IRQHandler+0x50>)
 80024da:	801a      	strh	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	bd98      	pop	{r3, r4, r7, pc}
 80024e0:	40014000 	.word	0x40014000
 80024e4:	2000007e 	.word	0x2000007e
 80024e8:	2000007c 	.word	0x2000007c
 80024ec:	20000080 	.word	0x20000080

080024f0 <sendServoByte>:
volatile uint8_t receiveBuffer[REC_BUFFER_LEN];
volatile uint8_t* volatile receiveBufferStart = receiveBuffer;
volatile uint8_t* volatile receiveBufferEnd = receiveBuffer;

void sendServoByte(uint8_t byte)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET);
 80024fa:	bf00      	nop
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	4808      	ldr	r0, [pc, #32]	; (8002520 <sendServoByte+0x30>)
 8002500:	f7ff feaa 	bl	8002258 <USART_GetFlagStatus>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f8      	beq.n	80024fc <sendServoByte+0xc>
	USART_SendData(USART1,byte);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	b29b      	uxth	r3, r3
 800250e:	4619      	mov	r1, r3
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <sendServoByte+0x30>)
 8002512:	f7ff fe17 	bl	8002144 <USART_SendData>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40011000 	.word	0x40011000

08002524 <sendServoCommand>:

void sendServoCommand (const uint8_t servoId,
                       const ServoCommand commandByte,
                       const uint8_t noOfParams,
                       const uint8_t *params)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	460b      	mov	r3, r1
 8002532:	71bb      	strb	r3, [r7, #6]
 8002534:	4613      	mov	r3, r2
 8002536:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < 25; ++i)
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e03f      	b.n	80025be <sendServoCommand+0x9a>
	{
		sendServoByte(0xff);
 800253e:	20ff      	movs	r0, #255	; 0xff
 8002540:	f7ff ffd6 	bl	80024f0 <sendServoByte>
		sendServoByte(0xff);  // command header
 8002544:	20ff      	movs	r0, #255	; 0xff
 8002546:	f7ff ffd3 	bl	80024f0 <sendServoByte>
		sendServoByte(servoId);  // servo ID
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ffcf 	bl	80024f0 <sendServoByte>
		uint8_t checksum = servoId;
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	73bb      	strb	r3, [r7, #14]

		sendServoByte(noOfParams + 2);  // number of following bytes
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	3302      	adds	r3, #2
 800255a:	b2db      	uxtb	r3, r3
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ffc7 	bl	80024f0 <sendServoByte>
		checksum += noOfParams + 2 + commandByte;
 8002562:	797a      	ldrb	r2, [r7, #5]
 8002564:	79bb      	ldrb	r3, [r7, #6]
 8002566:	4413      	add	r3, r2
 8002568:	b2da      	uxtb	r2, r3
 800256a:	7bbb      	ldrb	r3, [r7, #14]
 800256c:	4413      	add	r3, r2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	3302      	adds	r3, #2
 8002572:	73bb      	strb	r3, [r7, #14]

		sendServoByte((uint8_t)commandByte);
 8002574:	79bb      	ldrb	r3, [r7, #6]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ffba 	bl	80024f0 <sendServoByte>
		for (uint8_t i = 0; i < noOfParams; i++)
 800257c:	2300      	movs	r3, #0
 800257e:	737b      	strb	r3, [r7, #13]
 8002580:	e010      	b.n	80025a4 <sendServoCommand+0x80>
		{
			sendServoByte (params[i]);  // parameters
 8002582:	7b7b      	ldrb	r3, [r7, #13]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	4413      	add	r3, r2
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ffb0 	bl	80024f0 <sendServoByte>
			checksum += params[i];
 8002590:	7b7b      	ldrb	r3, [r7, #13]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	4413      	add	r3, r2
 8002596:	781a      	ldrb	r2, [r3, #0]
 8002598:	7bbb      	ldrb	r3, [r7, #14]
 800259a:	4413      	add	r3, r2
 800259c:	73bb      	strb	r3, [r7, #14]

		sendServoByte(noOfParams + 2);  // number of following bytes
		checksum += noOfParams + 2 + commandByte;

		sendServoByte((uint8_t)commandByte);
		for (uint8_t i = 0; i < noOfParams; i++)
 800259e:	7b7b      	ldrb	r3, [r7, #13]
 80025a0:	3301      	adds	r3, #1
 80025a2:	737b      	strb	r3, [r7, #13]
 80025a4:	7b7a      	ldrb	r2, [r7, #13]
 80025a6:	797b      	ldrb	r3, [r7, #5]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3ea      	bcc.n	8002582 <sendServoCommand+0x5e>
		{
			sendServoByte (params[i]);  // parameters
			checksum += params[i];
		}
		sendServoByte (~checksum);  // checksum
 80025ac:	7bbb      	ldrb	r3, [r7, #14]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff ff9c 	bl	80024f0 <sendServoByte>
void sendServoCommand (const uint8_t servoId,
                       const ServoCommand commandByte,
                       const uint8_t noOfParams,
                       const uint8_t *params)
{
	for(uint8_t i = 0; i < 25; ++i)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b18      	cmp	r3, #24
 80025c2:	d9bc      	bls.n	800253e <sendServoCommand+0x1a>
			sendServoByte (params[i]);  // parameters
			checksum += params[i];
		}
		sendServoByte (~checksum);  // checksum
	}
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <clearServoReceiveBuffer>:

void clearServoReceiveBuffer (void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
    receiveBufferStart = receiveBufferEnd;
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <clearServoReceiveBuffer+0x18>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <clearServoReceiveBuffer+0x1c>)
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000014 	.word	0x20000014
 80025e8:	20000010 	.word	0x20000010

080025ec <setServoDiode>:
    }

    return true;
}

void setServoDiode(uint8_t servoID, uint8_t isOn){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	460a      	mov	r2, r1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]
	uint8_t params[2];
	params[0] =0x19;
 80025fc:	2319      	movs	r3, #25
 80025fe:	733b      	strb	r3, [r7, #12]
	if(isOn){
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d009      	beq.n	800261a <setServoDiode+0x2e>
		params[1] = 0x01;
 8002606:	2301      	movs	r3, #1
 8002608:	737b      	strb	r3, [r7, #13]
		sendServoCommand(servoID, WRITE, 0x02, params);
 800260a:	f107 030c 	add.w	r3, r7, #12
 800260e:	79f8      	ldrb	r0, [r7, #7]
 8002610:	2202      	movs	r2, #2
 8002612:	2103      	movs	r1, #3
 8002614:	f7ff ff86 	bl	8002524 <sendServoCommand>
	}else{
		params[1] = 0x00;
		sendServoCommand(servoID, WRITE, 0x02, params);
	}
}
 8002618:	e008      	b.n	800262c <setServoDiode+0x40>
	params[0] =0x19;
	if(isOn){
		params[1] = 0x01;
		sendServoCommand(servoID, WRITE, 0x02, params);
	}else{
		params[1] = 0x00;
 800261a:	2300      	movs	r3, #0
 800261c:	737b      	strb	r3, [r7, #13]
		sendServoCommand(servoID, WRITE, 0x02, params);
 800261e:	f107 030c 	add.w	r3, r7, #12
 8002622:	79f8      	ldrb	r0, [r7, #7]
 8002624:	2202      	movs	r2, #2
 8002626:	2103      	movs	r1, #3
 8002628:	f7ff ff7c 	bl	8002524 <sendServoCommand>
	}
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <setServoTorque>:

// valid torque values are from 0 (free running) to 1023 (max)
bool setServoTorque (const uint8_t servoId,
                     const uint16_t torqueValue)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	80bb      	strh	r3, [r7, #4]
    const uint8_t highByte = (uint8_t)((torqueValue >> 8) & 0xff);
 8002644:	88bb      	ldrh	r3, [r7, #4]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b29b      	uxth	r3, r3
 800264a:	73fb      	strb	r3, [r7, #15]
    const uint8_t lowByte = (uint8_t)(torqueValue & 0xff);
 800264c:	88bb      	ldrh	r3, [r7, #4]
 800264e:	73bb      	strb	r3, [r7, #14]

    if (torqueValue > 1023)
 8002650:	88bb      	ldrh	r3, [r7, #4]
 8002652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002656:	d301      	bcc.n	800265c <setServoTorque+0x28>
        return false;
 8002658:	2300      	movs	r3, #0
 800265a:	e00c      	b.n	8002676 <setServoTorque+0x42>

    const uint8_t params[3] = {TORQUE,
 800265c:	2322      	movs	r3, #34	; 0x22
 800265e:	723b      	strb	r3, [r7, #8]
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	727b      	strb	r3, [r7, #9]
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	72bb      	strb	r3, [r7, #10]
                               lowByte,
                               highByte};

    sendServoCommand (servoId, WRITE, 3, params);
 8002668:	f107 0308 	add.w	r3, r7, #8
 800266c:	79f8      	ldrb	r0, [r7, #7]
 800266e:	2203      	movs	r2, #3
 8002670:	2103      	movs	r1, #3
 8002672:	f7ff ff57 	bl	8002524 <sendServoCommand>

//    if (!getAndCheckResponse (servoId))
//        return false;
//
//    return true;
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop

08002680 <setServoAngle>:

// make the servo move to an angle
// valid angles are between 0 and 300 degrees
bool setServoAngle (const uint8_t servoId,
                    const float angle)
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	ed87 0a00 	vstr	s0, [r7]
 800268c:	71fb      	strb	r3, [r7, #7]
    if (angle < 0 || angle > 300)
 800268e:	edd7 7a00 	vldr	s15, [r7]
 8002692:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800269a:	d408      	bmi.n	80026ae <setServoAngle+0x2e>
 800269c:	edd7 7a00 	vldr	s15, [r7]
 80026a0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002708 <setServoAngle+0x88>
 80026a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	dd01      	ble.n	80026b2 <setServoAngle+0x32>
        return false;
 80026ae:	2300      	movs	r3, #0
 80026b0:	e022      	b.n	80026f8 <setServoAngle+0x78>

    // angle values go from 0 to 0x3ff (1023)
    const uint16_t angleValue = (uint16_t)(angle * (1023.0 / 300.0));
 80026b2:	6838      	ldr	r0, [r7, #0]
 80026b4:	f7fd feec 	bl	8000490 <__aeabi_f2d>
 80026b8:	a311      	add	r3, pc, #68	; (adr r3, 8002700 <setServoAngle+0x80>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fd ff3b 	bl	8000538 <__aeabi_dmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	460c      	mov	r4, r1
 80026c6:	4618      	mov	r0, r3
 80026c8:	4621      	mov	r1, r4
 80026ca:	f7fe f947 	bl	800095c <__aeabi_d2uiz>
 80026ce:	4603      	mov	r3, r0
 80026d0:	81fb      	strh	r3, [r7, #14]

    const uint8_t highByte = (uint8_t)((angleValue >> 8) & 0xff);
 80026d2:	89fb      	ldrh	r3, [r7, #14]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	737b      	strb	r3, [r7, #13]
    const uint8_t lowByte = (uint8_t)(angleValue & 0xff);
 80026da:	89fb      	ldrh	r3, [r7, #14]
 80026dc:	733b      	strb	r3, [r7, #12]

    const uint8_t params[3] = {GOAL_ANGLE,
 80026de:	231e      	movs	r3, #30
 80026e0:	723b      	strb	r3, [r7, #8]
 80026e2:	7b3b      	ldrb	r3, [r7, #12]
 80026e4:	727b      	strb	r3, [r7, #9]
 80026e6:	7b7b      	ldrb	r3, [r7, #13]
 80026e8:	72bb      	strb	r3, [r7, #10]
                               lowByte,
                               highByte};

    sendServoCommand (servoId, WRITE, 3, params);
 80026ea:	f107 0308 	add.w	r3, r7, #8
 80026ee:	79f8      	ldrb	r0, [r7, #7]
 80026f0:	2203      	movs	r2, #3
 80026f2:	2103      	movs	r1, #3
 80026f4:	f7ff ff16 	bl	8002524 <sendServoCommand>

//    if (!getAndCheckResponse (servoId))
//        return false;
//
//    return true;
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	147ae148 	.word	0x147ae148
 8002704:	400b47ae 	.word	0x400b47ae
 8002708:	43960000 	.word	0x43960000

0800270c <enableTorque>:

    return true;
}

void enableTorque(uint8_t servoID, uint8_t isEnabled)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
	uint8_t params[2] = {0x18,isEnabled};
 800271c:	2318      	movs	r3, #24
 800271e:	733b      	strb	r3, [r7, #12]
 8002720:	79bb      	ldrb	r3, [r7, #6]
 8002722:	737b      	strb	r3, [r7, #13]
	sendServoCommand(servoID, WRITE, 2, params);
 8002724:	f107 030c 	add.w	r3, r7, #12
 8002728:	79f8      	ldrb	r0, [r7, #7]
 800272a:	2202      	movs	r2, #2
 800272c:	2103      	movs	r1, #3
 800272e:	f7ff fef9 	bl	8002524 <sendServoCommand>
}
 8002732:	bf00      	nop
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop

0800273c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002746:	4909      	ldr	r1, [pc, #36]	; (800276c <NVIC_EnableIRQ+0x30>)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	79fa      	ldrb	r2, [r7, #7]
 8002750:	f002 021f 	and.w	r2, r2, #31
 8002754:	2001      	movs	r0, #1
 8002756:	fa00 f202 	lsl.w	r2, r0, r2
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100

08002770 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	da0b      	bge.n	800279c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002784:	490d      	ldr	r1, [pc, #52]	; (80027bc <NVIC_SetPriority+0x4c>)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	3b04      	subs	r3, #4
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	b2d2      	uxtb	r2, r2
 8002792:	0112      	lsls	r2, r2, #4
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	440b      	add	r3, r1
 8002798:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800279a:	e009      	b.n	80027b0 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800279c:	4908      	ldr	r1, [pc, #32]	; (80027c0 <NVIC_SetPriority+0x50>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	0112      	lsls	r2, r2, #4
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	440b      	add	r3, r1
 80027ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027d2:	d301      	bcc.n	80027d8 <SysTick_Config+0x14>
 80027d4:	2301      	movs	r3, #1
 80027d6:	e011      	b.n	80027fc <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80027d8:	4a0a      	ldr	r2, [pc, #40]	; (8002804 <SysTick_Config+0x40>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027e0:	3b01      	subs	r3, #1
 80027e2:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80027e4:	210f      	movs	r1, #15
 80027e6:	f04f 30ff 	mov.w	r0, #4294967295
 80027ea:	f7ff ffc1 	bl	8002770 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <SysTick_Config+0x40>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <SysTick_Config+0x40>)
 80027f6:	2207      	movs	r2, #7
 80027f8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	e000e010 	.word	0xe000e010

08002808 <dxl_uart_init>:
	READ = 2,
	WRITE = 3
} ServoCommand;

static void dxl_uart_init(USART_TypeDef* USART, uint32_t baudrate)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
	USART_InitTypeDef USART_Init_Structure;
	NVIC_InitTypeDef NVIC_InitStructure;

	clearServoReceiveBuffer();
 8002812:	f7ff fedb 	bl	80025cc <clearServoReceiveBuffer>

	USART_Init_Structure.USART_BaudRate = baudrate;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	613b      	str	r3, [r7, #16]
	USART_Init_Structure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800281a:	2300      	movs	r3, #0
 800281c:	83bb      	strh	r3, [r7, #28]
	USART_Init_Structure.USART_WordLength = USART_WordLength_8b;
 800281e:	2300      	movs	r3, #0
 8002820:	82bb      	strh	r3, [r7, #20]
	USART_Init_Structure.USART_StopBits = USART_StopBits_1;
 8002822:	2300      	movs	r3, #0
 8002824:	82fb      	strh	r3, [r7, #22]
	USART_Init_Structure.USART_Parity = USART_Parity_No;
 8002826:	2300      	movs	r3, #0
 8002828:	833b      	strh	r3, [r7, #24]
	USART_Init_Structure.USART_Mode = USART_Mode_Tx;
 800282a:	2308      	movs	r3, #8
 800282c:	837b      	strh	r3, [r7, #26]
	USART_Init(USART, &USART_Init_Structure);
 800282e:	f107 0310 	add.w	r3, r7, #16
 8002832:	4619      	mov	r1, r3
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fbab 	bl	8001f90 <USART_Init>

	if(USART == USART1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1f      	ldr	r2, [pc, #124]	; (80028bc <dxl_uart_init+0xb4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d102      	bne.n	8002848 <dxl_uart_init+0x40>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8002842:	2325      	movs	r3, #37	; 0x25
 8002844:	733b      	strb	r3, [r7, #12]
 8002846:	e024      	b.n	8002892 <dxl_uart_init+0x8a>
	}
	else if(USART == USART2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <dxl_uart_init+0xb8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d102      	bne.n	8002856 <dxl_uart_init+0x4e>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002850:	2326      	movs	r3, #38	; 0x26
 8002852:	733b      	strb	r3, [r7, #12]
 8002854:	e01d      	b.n	8002892 <dxl_uart_init+0x8a>
	}
	else if(USART == USART3)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <dxl_uart_init+0xbc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d102      	bne.n	8002864 <dxl_uart_init+0x5c>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 800285e:	2327      	movs	r3, #39	; 0x27
 8002860:	733b      	strb	r3, [r7, #12]
 8002862:	e016      	b.n	8002892 <dxl_uart_init+0x8a>
	}
	else if(USART == UART4)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a18      	ldr	r2, [pc, #96]	; (80028c8 <dxl_uart_init+0xc0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d102      	bne.n	8002872 <dxl_uart_init+0x6a>
	{
		NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
 800286c:	2334      	movs	r3, #52	; 0x34
 800286e:	733b      	strb	r3, [r7, #12]
 8002870:	e00f      	b.n	8002892 <dxl_uart_init+0x8a>
	}
	else if(USART == UART5)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a15      	ldr	r2, [pc, #84]	; (80028cc <dxl_uart_init+0xc4>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d102      	bne.n	8002880 <dxl_uart_init+0x78>
	{
		NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
 800287a:	2335      	movs	r3, #53	; 0x35
 800287c:	733b      	strb	r3, [r7, #12]
 800287e:	e008      	b.n	8002892 <dxl_uart_init+0x8a>
	}
	else if(USART == USART6)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a13      	ldr	r2, [pc, #76]	; (80028d0 <dxl_uart_init+0xc8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d102      	bne.n	800288e <dxl_uart_init+0x86>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
 8002888:	2347      	movs	r3, #71	; 0x47
 800288a:	733b      	strb	r3, [r7, #12]
 800288c:	e001      	b.n	8002892 <dxl_uart_init+0x8a>
	}
	else
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 800288e:	2325      	movs	r3, #37	; 0x25
 8002890:	733b      	strb	r3, [r7, #12]
	}

	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
//	NVIC_Init (&NVIC_InitStructure);
//
//	// enable the USART receive interrupt
//	USART_ITConfig (USART, USART_IT_RXNE, ENABLE);

	USART_HalfDuplexCmd(USART, ENABLE);
 800289e:	2101      	movs	r1, #1
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fc71 	bl	8002188 <USART_HalfDuplexCmd>
	USART_Cmd (USART, ENABLE);
 80028a6:	2101      	movs	r1, #1
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7ff fc2b 	bl	8002104 <USART_Cmd>
	DYNAMIXEL_USART = USART;
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <dxl_uart_init+0xcc>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	3720      	adds	r7, #32
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40011000 	.word	0x40011000
 80028c0:	40004400 	.word	0x40004400
 80028c4:	40004800 	.word	0x40004800
 80028c8:	40004c00 	.word	0x40004c00
 80028cc:	40005000 	.word	0x40005000
 80028d0:	40011400 	.word	0x40011400
 80028d4:	200000a4 	.word	0x200000a4

080028d8 <main>:
void sendStartStop(char isOn);


volatile RCC_ClocksTypeDef RCC_Clocks;
int main(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  RCC_CONF();
 80028de:	f000 f84d 	bl	800297c <RCC_CONF>
  GPIO_CONF();
 80028e2:	f000 f883 	bl	80029ec <GPIO_CONF>
  USART_CONF();
 80028e6:	f000 f9fb 	bl	8002ce0 <USART_CONF>
  NVIC_Conf();
 80028ea:	f000 fb01 	bl	8002ef0 <NVIC_Conf>
  //ENK3init();
  //ENK2init();
  TIM_CONF();
 80028ee:	f000 fa27 	bl	8002d40 <TIM_CONF>
  initCan();
 80028f2:	f7ff fd47 	bl	8002384 <initCan>

  uint8_t params[5] = {0x06, 0x00, 0x00, 0xFF, 0x03};
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <main+0x98>)
 80028f8:	463b      	mov	r3, r7
 80028fa:	6810      	ldr	r0, [r2, #0]
 80028fc:	6018      	str	r0, [r3, #0]
 80028fe:	7912      	ldrb	r2, [r2, #4]
 8002900:	711a      	strb	r2, [r3, #4]
  setServoDiode(0x01, 0x01);
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f7ff fe71 	bl	80025ec <setServoDiode>
  enableTorque(0x01, 0x01);
 800290a:	2101      	movs	r1, #1
 800290c:	2001      	movs	r0, #1
 800290e:	f7ff fefd 	bl	800270c <enableTorque>
  setServoTorque(0x01, 1023);
 8002912:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002916:	2001      	movs	r0, #1
 8002918:	f7ff fe8c 	bl	8002634 <setServoTorque>
  sendServoCommand(0x01, WRITE, 0x05, params );
 800291c:	463b      	mov	r3, r7
 800291e:	2205      	movs	r2, #5
 8002920:	2103      	movs	r1, #3
 8002922:	2001      	movs	r0, #1
 8002924:	f7ff fdfe 	bl	8002524 <sendServoCommand>
  setServoAngle(0x01, angle1);
 8002928:	4b12      	ldr	r3, [pc, #72]	; (8002974 <main+0x9c>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	eeb0 0a67 	vmov.f32	s0, s15
 8002932:	2001      	movs	r0, #1
 8002934:	f7ff fea4 	bl	8002680 <setServoAngle>

  setServoDiode(0x02, 0x01);
 8002938:	2101      	movs	r1, #1
 800293a:	2002      	movs	r0, #2
 800293c:	f7ff fe56 	bl	80025ec <setServoDiode>
  enableTorque(0x02, 0x01);
 8002940:	2101      	movs	r1, #1
 8002942:	2002      	movs	r0, #2
 8002944:	f7ff fee2 	bl	800270c <enableTorque>
  setServoTorque(0x02, 1023);
 8002948:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800294c:	2002      	movs	r0, #2
 800294e:	f7ff fe71 	bl	8002634 <setServoTorque>
  sendServoCommand(0x02, WRITE, 0x05, params );
 8002952:	463b      	mov	r3, r7
 8002954:	2205      	movs	r2, #5
 8002956:	2103      	movs	r1, #3
 8002958:	2002      	movs	r0, #2
 800295a:	f7ff fde3 	bl	8002524 <sendServoCommand>
  setServoAngle(0x02, angle2);
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <main+0xa0>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	eeb0 0a67 	vmov.f32	s0, s15
 8002968:	2002      	movs	r0, #2
 800296a:	f7ff fe89 	bl	8002680 <setServoAngle>

  while (1)
  {
  }
 800296e:	e7fe      	b.n	800296e <main+0x96>
 8002970:	08003dec 	.word	0x08003dec
 8002974:	20000018 	.word	0x20000018
 8002978:	2000001c 	.word	0x2000001c

0800297c <RCC_CONF>:
}

/* Private functions */

// Clock configuration and initialization:
void RCC_CONF(){
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af02      	add	r7, sp, #8
	//SYSCLK 100MHz:
	RCC_DeInit();
 8002982:	f7fe fd55 	bl	8001430 <RCC_DeInit>

	RCC_HSEConfig(RCC_HSE_ON);
 8002986:	2001      	movs	r0, #1
 8002988:	f7fe fd80 	bl	800148c <RCC_HSEConfig>
	while(RCC_WaitForHSEStartUp() != SUCCESS);
 800298c:	bf00      	nop
 800298e:	f7fe fd91 	bl	80014b4 <RCC_WaitForHSEStartUp>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d1fa      	bne.n	800298e <RCC_CONF+0x12>

	RCC_PLLConfig(RCC_PLLSource_HSE, 4, 144, 2, 4);
 8002998:	2304      	movs	r3, #4
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2302      	movs	r3, #2
 800299e:	2290      	movs	r2, #144	; 0x90
 80029a0:	2104      	movs	r1, #4
 80029a2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80029a6:	f7fe fdad 	bl	8001504 <RCC_PLLConfig>
	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 80029aa:	2000      	movs	r0, #0
 80029ac:	f7fe fdf6 	bl	800159c <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div4);
 80029b0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80029b4:	f7fe fe0e 	bl	80015d4 <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div2);
 80029b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029bc:	f7fe fe26 	bl	800160c <RCC_PCLK2Config>
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 80029c0:	2002      	movs	r0, #2
 80029c2:	f7fe fdcf 	bl	8001564 <RCC_SYSCLKConfig>
	RCC_PLLCmd(ENABLE);
 80029c6:	2001      	movs	r0, #1
 80029c8:	f7fe fdbc 	bl	8001544 <RCC_PLLCmd>
	while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) != SET);
 80029cc:	bf00      	nop
 80029ce:	2039      	movs	r0, #57	; 0x39
 80029d0:	f7fe ff64 	bl	800189c <RCC_GetFlagStatus>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d1f9      	bne.n	80029ce <RCC_CONF+0x52>

	//SysTick initialisation:
	SysTick_Config(TIMEOUT_CNT);
 80029da:	4803      	ldr	r0, [pc, #12]	; (80029e8 <RCC_CONF+0x6c>)
 80029dc:	f7ff fef2 	bl	80027c4 <SysTick_Config>
};
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	ffe97eec 	.word	0xffe97eec

080029ec <GPIO_CONF>:

void GPIO_CONF(){
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80029f2:	2101      	movs	r1, #1
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7fe fed1 	bl	800179c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80029fa:	2101      	movs	r1, #1
 80029fc:	2002      	movs	r0, #2
 80029fe:	f7fe fecd 	bl	800179c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002a02:	2101      	movs	r1, #1
 8002a04:	2004      	movs	r0, #4
 8002a06:	f7fe fec9 	bl	800179c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2008      	movs	r0, #8
 8002a0e:	f7fe fec5 	bl	800179c <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002a12:	2101      	movs	r1, #1
 8002a14:	2010      	movs	r0, #16
 8002a16:	f7fe fec1 	bl	800179c <RCC_AHB1PeriphClockCmd>

	//MOTOR_1_PWM:

	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8002a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a1e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002a20:	2300      	movs	r3, #0
 8002a22:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a30:	463b      	mov	r3, r7
 8002a32:	4619      	mov	r1, r3
 8002a34:	48a5      	ldr	r0, [pc, #660]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002a36:	f7fe fc03 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM4);
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	2108      	movs	r1, #8
 8002a3e:	48a3      	ldr	r0, [pc, #652]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002a40:	f7fe fcac 	bl	800139c <GPIO_PinAFConfig>

	//MOTOR_2_PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8002a44:	2304      	movs	r3, #4
 8002a46:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	48a0      	ldr	r0, [pc, #640]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a4e:	f7fe fbf7 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);
 8002a52:	2201      	movs	r2, #1
 8002a54:	2102      	movs	r1, #2
 8002a56:	489e      	ldr	r0, [pc, #632]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a58:	f7fe fca0 	bl	800139c <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
 8002a5c:	2340      	movs	r3, #64	; 0x40
 8002a5e:	603b      	str	r3, [r7, #0]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a60:	463b      	mov	r3, r7
 8002a62:	4619      	mov	r1, r3
 8002a64:	489a      	ldr	r0, [pc, #616]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a66:	f7fe fbeb 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource6, GPIO_AF_TIM3);
 8002a6a:	2202      	movs	r2, #2
 8002a6c:	2106      	movs	r1, #6
 8002a6e:	4898      	ldr	r0, [pc, #608]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a70:	f7fe fc94 	bl	800139c <GPIO_PinAFConfig>

	//MOTOR_3_PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8002a74:	2308      	movs	r3, #8
 8002a76:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a78:	463b      	mov	r3, r7
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4894      	ldr	r0, [pc, #592]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a7e:	f7fe fbdf 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_TIM2);
 8002a82:	2201      	movs	r2, #1
 8002a84:	2102      	movs	r1, #2
 8002a86:	4892      	ldr	r0, [pc, #584]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a88:	f7fe fc88 	bl	800139c <GPIO_PinAFConfig>

	//MOTOR_4_PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
 8002a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a90:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002a92:	463b      	mov	r3, r7
 8002a94:	4619      	mov	r1, r3
 8002a96:	488e      	ldr	r0, [pc, #568]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002a98:	f7fe fbd2 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource15, GPIO_AF_TIM2);
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	488b      	ldr	r0, [pc, #556]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002aa2:	f7fe fc7b 	bl	800139c <GPIO_PinAFConfig>

	//MOTOR_5_PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002aaa:	463b      	mov	r3, r7
 8002aac:	4619      	mov	r1, r3
 8002aae:	4887      	ldr	r0, [pc, #540]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002ab0:	f7fe fbc6 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_TIM2);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2103      	movs	r1, #3
 8002ab8:	4884      	ldr	r0, [pc, #528]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002aba:	f7fe fc6f 	bl	800139c <GPIO_PinAFConfig>

	//MOTOR_6_PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8002abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac2:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ac4:	463b      	mov	r3, r7
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4880      	ldr	r0, [pc, #512]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002aca:	f7fe fbb9 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_TIM4);
 8002ace:	2202      	movs	r2, #2
 8002ad0:	2109      	movs	r1, #9
 8002ad2:	487e      	ldr	r0, [pc, #504]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002ad4:	f7fe fc62 	bl	800139c <GPIO_PinAFConfig>

	//BM_PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8002ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002adc:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ade:	463b      	mov	r3, r7
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	487a      	ldr	r0, [pc, #488]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002ae4:	f7fe fbac 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_TIM2);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	210a      	movs	r1, #10
 8002aec:	4877      	ldr	r0, [pc, #476]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002aee:	f7fe fc55 	bl	800139c <GPIO_PinAFConfig>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8002af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002af6:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002af8:	463b      	mov	r3, r7
 8002afa:	4619      	mov	r1, r3
 8002afc:	4873      	ldr	r0, [pc, #460]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002afe:	f7fe fb9f 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8002b02:	2201      	movs	r2, #1
 8002b04:	210b      	movs	r1, #11
 8002b06:	4871      	ldr	r0, [pc, #452]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002b08:	f7fe fc48 	bl	800139c <GPIO_PinAFConfig>

	//Servo PWM:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5;
 8002b0c:	2330      	movs	r3, #48	; 0x30
 8002b0e:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002b10:	463b      	mov	r3, r7
 8002b12:	4619      	mov	r1, r3
 8002b14:	486d      	ldr	r0, [pc, #436]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002b16:	f7fe fb93 	bl	8001240 <GPIO_Init>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_TIM3);
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	486b      	ldr	r0, [pc, #428]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002b20:	f7fe fc3c 	bl	800139c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_TIM3);
 8002b24:	2202      	movs	r2, #2
 8002b26:	2105      	movs	r1, #5
 8002b28:	4868      	ldr	r0, [pc, #416]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002b2a:	f7fe fc37 	bl	800139c <GPIO_PinAFConfig>

	//MOTOR_1_IN gripper:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8002b2e:	230c      	movs	r3, #12
 8002b30:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b32:	2301      	movs	r3, #1
 8002b34:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002b36:	463b      	mov	r3, r7
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4866      	ldr	r0, [pc, #408]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002b3c:	f7fe fb80 	bl	8001240 <GPIO_Init>
	GPIO_ResetBits(GPIOE, GPIO_Pin_3);
 8002b40:	2108      	movs	r1, #8
 8002b42:	4864      	ldr	r0, [pc, #400]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002b44:	f7fe fc1a 	bl	800137c <GPIO_ResetBits>
	GPIO_ResetBits(GPIOE, GPIO_Pin_2);
 8002b48:	2104      	movs	r1, #4
 8002b4a:	4862      	ldr	r0, [pc, #392]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002b4c:	f7fe fc16 	bl	800137c <GPIO_ResetBits>

	//MOTOR_2_IN gripper:

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 8002b50:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002b54:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b56:	2301      	movs	r3, #1
 8002b58:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002b5a:	463b      	mov	r3, r7
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	485e      	ldr	r0, [pc, #376]	; (8002cd8 <GPIO_CONF+0x2ec>)
 8002b60:	f7fe fb6e 	bl	8001240 <GPIO_Init>
	GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 8002b64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b68:	485b      	ldr	r0, [pc, #364]	; (8002cd8 <GPIO_CONF+0x2ec>)
 8002b6a:	f7fe fc07 	bl	800137c <GPIO_ResetBits>
	GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 8002b6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002b72:	4859      	ldr	r0, [pc, #356]	; (8002cd8 <GPIO_CONF+0x2ec>)
 8002b74:	f7fe fc02 	bl	800137c <GPIO_ResetBits>
	GPIO_Init(GPIOD, &GPIO_InitStructure);
	GPIO_ResetBits(GPIOD, GPIO_Pin_2);*/

	//MOTOR_4_IN (first degree):

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002b80:	463b      	mov	r3, r7
 8002b82:	4619      	mov	r1, r3
 8002b84:	4855      	ldr	r0, [pc, #340]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002b86:	f7fe fb5b 	bl	8001240 <GPIO_Init>
	GPIO_SetBits(GPIOD, GPIO_Pin_0);
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	4853      	ldr	r0, [pc, #332]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002b8e:	f7fe fbe5 	bl	800135c <GPIO_SetBits>
	GPIO_ResetBits(GPIOD, GPIO_Pin_1);
 8002b92:	2102      	movs	r1, #2
 8002b94:	4851      	ldr	r0, [pc, #324]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002b96:	f7fe fbf1 	bl	800137c <GPIO_ResetBits>

	//MOTOR_5_IN: (third degree)

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_7;
 8002b9a:	2390      	movs	r3, #144	; 0x90
 8002b9c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ba2:	463b      	mov	r3, r7
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	484d      	ldr	r0, [pc, #308]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002ba8:	f7fe fb4a 	bl	8001240 <GPIO_Init>
	GPIO_SetBits(GPIOD, GPIO_Pin_4);
 8002bac:	2110      	movs	r1, #16
 8002bae:	484b      	ldr	r0, [pc, #300]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002bb0:	f7fe fbd4 	bl	800135c <GPIO_SetBits>
	GPIO_ResetBits(GPIOD, GPIO_Pin_7);
 8002bb4:	2180      	movs	r1, #128	; 0x80
 8002bb6:	4849      	ldr	r0, [pc, #292]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002bb8:	f7fe fbe0 	bl	800137c <GPIO_ResetBits>

	//MOTOR_6_IN: (fourth degree)

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_4;
 8002bbc:	2311      	movs	r3, #17
 8002bbe:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002bc4:	463b      	mov	r3, r7
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4842      	ldr	r0, [pc, #264]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002bca:	f7fe fb39 	bl	8001240 <GPIO_Init>
	GPIO_SetBits(GPIOE, GPIO_Pin_4);
 8002bce:	2110      	movs	r1, #16
 8002bd0:	4840      	ldr	r0, [pc, #256]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002bd2:	f7fe fbc3 	bl	800135c <GPIO_SetBits>
	GPIO_ResetBits(GPIOE, GPIO_Pin_0);
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	483e      	ldr	r0, [pc, #248]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002bda:	f7fe fbcf 	bl	800137c <GPIO_ResetBits>

	//BM_ENABLE: (second degree)

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14 | GPIO_Pin_15;
 8002bde:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002be2:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002be4:	2301      	movs	r3, #1
 8002be6:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002be8:	463b      	mov	r3, r7
 8002bea:	4619      	mov	r1, r3
 8002bec:	4839      	ldr	r0, [pc, #228]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002bee:	f7fe fb27 	bl	8001240 <GPIO_Init>
	GPIO_SetBits(GPIOE, GPIO_Pin_14);
 8002bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bf6:	4837      	ldr	r0, [pc, #220]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002bf8:	f7fe fbb0 	bl	800135c <GPIO_SetBits>
	GPIO_SetBits(GPIOE, GPIO_Pin_15);
 8002bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c00:	4834      	ldr	r0, [pc, #208]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002c02:	f7fe fbab 	bl	800135c <GPIO_SetBits>

	//LED_GREEN:
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8002c06:	2304      	movs	r3, #4
 8002c08:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c0a:	463b      	mov	r3, r7
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	482f      	ldr	r0, [pc, #188]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002c10:	f7fe fb16 	bl	8001240 <GPIO_Init>
	GPIO_ResetBits(GPIOB, GPIO_Pin_2);
 8002c14:	2104      	movs	r1, #4
 8002c16:	482d      	ldr	r0, [pc, #180]	; (8002ccc <GPIO_CONF+0x2e0>)
 8002c18:	f7fe fbb0 	bl	800137c <GPIO_ResetBits>

	//USART_2:
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 | GPIO_Pin_6;
 8002c1c:	2360      	movs	r3, #96	; 0x60
 8002c1e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002c20:	2302      	movs	r3, #2
 8002c22:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002c24:	463b      	mov	r3, r7
 8002c26:	4619      	mov	r1, r3
 8002c28:	482c      	ldr	r0, [pc, #176]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002c2a:	f7fe fb09 	bl	8001240 <GPIO_Init>

	GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
 8002c2e:	2207      	movs	r2, #7
 8002c30:	2105      	movs	r1, #5
 8002c32:	482a      	ldr	r0, [pc, #168]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002c34:	f7fe fbb2 	bl	800139c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
 8002c38:	2207      	movs	r2, #7
 8002c3a:	2106      	movs	r1, #6
 8002c3c:	4827      	ldr	r0, [pc, #156]	; (8002cdc <GPIO_CONF+0x2f0>)
 8002c3e:	f7fe fbad 	bl	800139c <GPIO_PinAFConfig>

	//USART_1:
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10;
 8002c42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c46:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002c4c:	463b      	mov	r3, r7
 8002c4e:	4619      	mov	r1, r3
 8002c50:	481f      	ldr	r0, [pc, #124]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002c52:	f7fe faf5 	bl	8001240 <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
 8002c56:	2207      	movs	r2, #7
 8002c58:	2109      	movs	r1, #9
 8002c5a:	481d      	ldr	r0, [pc, #116]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002c5c:	f7fe fb9e 	bl	800139c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
 8002c60:	2207      	movs	r2, #7
 8002c62:	210a      	movs	r1, #10
 8002c64:	481a      	ldr	r0, [pc, #104]	; (8002cd0 <GPIO_CONF+0x2e4>)
 8002c66:	f7fe fb99 	bl	800139c <GPIO_PinAFConfig>

	//Encoder_3:
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11;
 8002c6a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c6e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002c70:	2300      	movs	r3, #0
 8002c72:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002c74:	2300      	movs	r3, #0
 8002c76:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4815      	ldr	r0, [pc, #84]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002c7e:	f7fe fadf 	bl	8001240 <GPIO_Init>
	GPIO_ResetBits(GPIOE, GPIO_Pin_9);
 8002c82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c86:	4813      	ldr	r0, [pc, #76]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002c88:	f7fe fb78 	bl	800137c <GPIO_ResetBits>
	GPIO_ResetBits(GPIOE, GPIO_Pin_11);
 8002c8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c90:	4810      	ldr	r0, [pc, #64]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002c92:	f7fe fb73 	bl	800137c <GPIO_ResetBits>

	//Encoder_4:
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_11;
 8002c96:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002c9a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480a      	ldr	r0, [pc, #40]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002caa:	f7fe fac9 	bl	8001240 <GPIO_Init>
	GPIO_ResetBits(GPIOE, GPIO_Pin_9);
 8002cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cb2:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002cb4:	f7fe fb62 	bl	800137c <GPIO_ResetBits>
	GPIO_ResetBits(GPIOE, GPIO_Pin_11);
 8002cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002cbc:	4805      	ldr	r0, [pc, #20]	; (8002cd4 <GPIO_CONF+0x2e8>)
 8002cbe:	f7fe fb5d 	bl	800137c <GPIO_ResetBits>

};
 8002cc2:	bf00      	nop
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40020400 	.word	0x40020400
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40020c00 	.word	0x40020c00

08002ce0 <USART_CONF>:

void USART_CONF(){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002cec:	f7fe fd76 	bl	80017dc <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	2010      	movs	r0, #16
 8002cf4:	f7fe fd92 	bl	800181c <RCC_APB2PeriphClockCmd>
	USART_InitTypeDef USART_Init_Structure;

	USART_Init_Structure.USART_BaudRate = 1000000;
 8002cf8:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <USART_CONF+0x54>)
 8002cfa:	603b      	str	r3, [r7, #0]
	USART_Init_Structure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	81bb      	strh	r3, [r7, #12]
	USART_Init_Structure.USART_WordLength = USART_WordLength_8b;
 8002d00:	2300      	movs	r3, #0
 8002d02:	80bb      	strh	r3, [r7, #4]
	USART_Init_Structure.USART_StopBits = USART_StopBits_1;
 8002d04:	2300      	movs	r3, #0
 8002d06:	80fb      	strh	r3, [r7, #6]
	USART_Init_Structure.USART_Parity = USART_Parity_No;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	813b      	strh	r3, [r7, #8]
	USART_Init_Structure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002d0c:	230c      	movs	r3, #12
 8002d0e:	817b      	strh	r3, [r7, #10]
	USART_Init(USART2, &USART_Init_Structure);
 8002d10:	463b      	mov	r3, r7
 8002d12:	4619      	mov	r1, r3
 8002d14:	4808      	ldr	r0, [pc, #32]	; (8002d38 <USART_CONF+0x58>)
 8002d16:	f7ff f93b 	bl	8001f90 <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4806      	ldr	r0, [pc, #24]	; (8002d38 <USART_CONF+0x58>)
 8002d1e:	f7ff f9f1 	bl	8002104 <USART_Cmd>

	//RS-485:
	dxl_uart_init(USART1,BAUDRATE);
 8002d22:	4904      	ldr	r1, [pc, #16]	; (8002d34 <USART_CONF+0x54>)
 8002d24:	4805      	ldr	r0, [pc, #20]	; (8002d3c <USART_CONF+0x5c>)
 8002d26:	f7ff fd6f 	bl	8002808 <dxl_uart_init>
}
 8002d2a:	bf00      	nop
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	000f4240 	.word	0x000f4240
 8002d38:	40004400 	.word	0x40004400
 8002d3c:	40011000 	.word	0x40011000

08002d40 <TIM_CONF>:

void TIM_CONF(){
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8002d46:	2101      	movs	r1, #1
 8002d48:	2004      	movs	r0, #4
 8002d4a:	f7fe fd47 	bl	80017dc <RCC_APB1PeriphClockCmd>

	TIM_TimeBaseInitTypeDef TIM_InitStructure;//50 MHz clock
	TIM_InitStructure.TIM_Prescaler = 50; // 1 MHz
 8002d4e:	2332      	movs	r3, #50	; 0x32
 8002d50:	82bb      	strh	r3, [r7, #20]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d52:	2300      	movs	r3, #0
 8002d54:	82fb      	strh	r3, [r7, #22]
	TIM_InitStructure.TIM_Period = 1000; //1 KHz
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	61bb      	str	r3, [r7, #24]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_RepetitionCounter = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	77bb      	strb	r3, [r7, #30]
	TIM_TimeBaseInit(TIM4, &TIM_InitStructure);
 8002d64:	f107 0314 	add.w	r3, r7, #20
 8002d68:	4619      	mov	r1, r3
 8002d6a:	485e      	ldr	r0, [pc, #376]	; (8002ee4 <TIM_CONF+0x1a4>)
 8002d6c:	f7fe fdd0 	bl	8001910 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef TIM_OCInitStruct;
	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8002d70:	2360      	movs	r3, #96	; 0x60
 8002d72:	803b      	strh	r3, [r7, #0]
	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8002d74:	2301      	movs	r3, #1
 8002d76:	807b      	strh	r3, [r7, #2]
	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	81bb      	strh	r3, [r7, #12]
	TIM_OCInitStruct.TIM_Pulse = 0; //50%
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	60bb      	str	r3, [r7, #8]

	TIM_OC3Init(TIM4, &TIM_OCInitStruct);
 8002d80:	463b      	mov	r3, r7
 8002d82:	4619      	mov	r1, r3
 8002d84:	4857      	ldr	r0, [pc, #348]	; (8002ee4 <TIM_CONF+0x1a4>)
 8002d86:	f7fe ff51 	bl	8001c2c <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8002d8a:	2108      	movs	r1, #8
 8002d8c:	4855      	ldr	r0, [pc, #340]	; (8002ee4 <TIM_CONF+0x1a4>)
 8002d8e:	f7ff f8ad 	bl	8001eec <TIM_OC3PreloadConfig>
	TIM_OC4Init(TIM4, &TIM_OCInitStruct);
 8002d92:	463b      	mov	r3, r7
 8002d94:	4619      	mov	r1, r3
 8002d96:	4853      	ldr	r0, [pc, #332]	; (8002ee4 <TIM_CONF+0x1a4>)
 8002d98:	f7fe ffce 	bl	8001d38 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8002d9c:	2108      	movs	r1, #8
 8002d9e:	4851      	ldr	r0, [pc, #324]	; (8002ee4 <TIM_CONF+0x1a4>)
 8002da0:	f7ff f8c0 	bl	8001f24 <TIM_OC4PreloadConfig>
	TIM_Cmd(TIM4, ENABLE);
 8002da4:	2101      	movs	r1, #1
 8002da6:	484f      	ldr	r0, [pc, #316]	; (8002ee4 <TIM_CONF+0x1a4>)
 8002da8:	f7fe fe1e 	bl	80019e8 <TIM_Cmd>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8002dac:	2101      	movs	r1, #1
 8002dae:	2002      	movs	r0, #2
 8002db0:	f7fe fd14 	bl	80017dc <RCC_APB1PeriphClockCmd>
	//50 MHz clock
	TIM_InitStructure.TIM_Prescaler = 50; // 200 kHz
 8002db4:	2332      	movs	r3, #50	; 0x32
 8002db6:	82bb      	strh	r3, [r7, #20]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002db8:	2300      	movs	r3, #0
 8002dba:	82fb      	strh	r3, [r7, #22]
	TIM_InitStructure.TIM_Period = 1000; //1 KHz
 8002dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc0:	61bb      	str	r3, [r7, #24]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_RepetitionCounter = 0;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	77bb      	strb	r3, [r7, #30]
	TIM_TimeBaseInit(TIM3, &TIM_InitStructure);
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4845      	ldr	r0, [pc, #276]	; (8002ee8 <TIM_CONF+0x1a8>)
 8002dd2:	f7fe fd9d 	bl	8001910 <TIM_TimeBaseInit>

	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8002dd6:	2360      	movs	r3, #96	; 0x60
 8002dd8:	803b      	strh	r3, [r7, #0]
	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	807b      	strh	r3, [r7, #2]
	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8002dde:	2300      	movs	r3, #0
 8002de0:	81bb      	strh	r3, [r7, #12]
	TIM_OCInitStruct.TIM_Pulse = 0; //10%
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

	TIM_OC1Init(TIM3, &TIM_OCInitStruct);
 8002de6:	463b      	mov	r3, r7
 8002de8:	4619      	mov	r1, r3
 8002dea:	483f      	ldr	r0, [pc, #252]	; (8002ee8 <TIM_CONF+0x1a8>)
 8002dec:	f7fe fe1c 	bl	8001a28 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002df0:	2108      	movs	r1, #8
 8002df2:	483d      	ldr	r0, [pc, #244]	; (8002ee8 <TIM_CONF+0x1a8>)
 8002df4:	f7ff f840 	bl	8001e78 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM3, &TIM_OCInitStruct);
 8002df8:	463b      	mov	r3, r7
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	483a      	ldr	r0, [pc, #232]	; (8002ee8 <TIM_CONF+0x1a8>)
 8002dfe:	f7fe fe8d 	bl	8001b1c <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable);
 8002e02:	2108      	movs	r1, #8
 8002e04:	4838      	ldr	r0, [pc, #224]	; (8002ee8 <TIM_CONF+0x1a8>)
 8002e06:	f7ff f853 	bl	8001eb0 <TIM_OC2PreloadConfig>
	TIM_Cmd(TIM3, ENABLE);
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4836      	ldr	r0, [pc, #216]	; (8002ee8 <TIM_CONF+0x1a8>)
 8002e0e:	f7fe fdeb 	bl	80019e8 <TIM_Cmd>

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002e12:	2101      	movs	r1, #1
 8002e14:	2001      	movs	r0, #1
 8002e16:	f7fe fce1 	bl	80017dc <RCC_APB1PeriphClockCmd>

	TIM_InitStructure.TIM_Prescaler = 50; // 1 MHz
 8002e1a:	2332      	movs	r3, #50	; 0x32
 8002e1c:	82bb      	strh	r3, [r7, #20]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	82fb      	strh	r3, [r7, #22]
	TIM_InitStructure.TIM_Period = 1000; //1 KHz
 8002e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e26:	61bb      	str	r3, [r7, #24]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_RepetitionCounter = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	77bb      	strb	r3, [r7, #30]
	TIM_TimeBaseInit(TIM2, &TIM_InitStructure);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e3a:	f7fe fd69 	bl	8001910 <TIM_TimeBaseInit>

	TIM_OCInitStruct.TIM_OCMode = TIM_OCMode_PWM1;
 8002e3e:	2360      	movs	r3, #96	; 0x60
 8002e40:	803b      	strh	r3, [r7, #0]
	TIM_OCInitStruct.TIM_OutputState = TIM_OutputState_Enable;
 8002e42:	2301      	movs	r3, #1
 8002e44:	807b      	strh	r3, [r7, #2]
	TIM_OCInitStruct.TIM_OCPolarity = TIM_OCPolarity_High;
 8002e46:	2300      	movs	r3, #0
 8002e48:	81bb      	strh	r3, [r7, #12]
	TIM_OCInitStruct.TIM_Pulse = 0;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	60bb      	str	r3, [r7, #8]

	TIM_OC1Init(TIM2, &TIM_OCInitStruct);
 8002e4e:	463b      	mov	r3, r7
 8002e50:	4619      	mov	r1, r3
 8002e52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e56:	f7fe fde7 	bl	8001a28 <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002e5a:	2108      	movs	r1, #8
 8002e5c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e60:	f7ff f80a 	bl	8001e78 <TIM_OC1PreloadConfig>
	TIM_OC2Init(TIM2, &TIM_OCInitStruct);
 8002e64:	463b      	mov	r3, r7
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e6c:	f7fe fe56 	bl	8001b1c <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002e70:	2108      	movs	r1, #8
 8002e72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e76:	f7ff f81b 	bl	8001eb0 <TIM_OC2PreloadConfig>
	TIM_OC3Init(TIM2, &TIM_OCInitStruct);
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e82:	f7fe fed3 	bl	8001c2c <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002e86:	2108      	movs	r1, #8
 8002e88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e8c:	f7ff f82e 	bl	8001eec <TIM_OC3PreloadConfig>
	TIM_OC4Init(TIM2, &TIM_OCInitStruct);
 8002e90:	463b      	mov	r3, r7
 8002e92:	4619      	mov	r1, r3
 8002e94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e98:	f7fe ff4e 	bl	8001d38 <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002e9c:	2108      	movs	r1, #8
 8002e9e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ea2:	f7ff f83f 	bl	8001f24 <TIM_OC4PreloadConfig>
	TIM_Cmd(TIM2, ENABLE);
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002eac:	f7fe fd9c 	bl	80019e8 <TIM_Cmd>

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f7fe fcb2 	bl	800181c <RCC_APB2PeriphClockCmd>

    TIM_InitStructure.TIM_Prescaler = 50; // 1 MHz
 8002eb8:	2332      	movs	r3, #50	; 0x32
 8002eba:	82bb      	strh	r3, [r7, #20]
	TIM_InitStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	82fb      	strh	r3, [r7, #22]
	TIM_InitStructure.TIM_Period = 1000; //1 KHz
 8002ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ec4:	61bb      	str	r3, [r7, #24]
	TIM_InitStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	83bb      	strh	r3, [r7, #28]
	TIM_InitStructure.TIM_RepetitionCounter = 0;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	77bb      	strb	r3, [r7, #30]
	TIM_TimeBaseInit(TIM1, &TIM_InitStructure);
 8002ece:	f107 0314 	add.w	r3, r7, #20
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4805      	ldr	r0, [pc, #20]	; (8002eec <TIM_CONF+0x1ac>)
 8002ed6:	f7fe fd1b 	bl	8001910 <TIM_TimeBaseInit>

};
 8002eda:	bf00      	nop
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40010000 	.word	0x40010000

08002ef0 <NVIC_Conf>:

void NVIC_Conf(){
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8002ef6:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8002efa:	f7fd fd4f 	bl	800099c <NVIC_PriorityGroupConfig>

    NVIC_InitTypeDef NVIC_InitStruct;
	NVIC_InitStruct.NVIC_IRQChannel = USART2_IRQn;
 8002efe:	2326      	movs	r3, #38	; 0x26
 8002f00:	713b      	strb	r3, [r7, #4]
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	717b      	strb	r3, [r7, #5]
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStruct);
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fd fd57 	bl	80009c4 <NVIC_Init>

	NVIC_SetPriority(USART2_IRQn, 1);
 8002f16:	2101      	movs	r1, #1
 8002f18:	2026      	movs	r0, #38	; 0x26
 8002f1a:	f7ff fc29 	bl	8002770 <NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8002f1e:	2026      	movs	r0, #38	; 0x26
 8002f20:	f7ff fc0c 	bl	800273c <NVIC_EnableIRQ>

	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8002f24:	2201      	movs	r2, #1
 8002f26:	f240 5125 	movw	r1, #1317	; 0x525
 8002f2a:	4803      	ldr	r0, [pc, #12]	; (8002f38 <NVIC_Conf+0x48>)
 8002f2c:	f7ff f94c 	bl	80021c8 <USART_ITConfig>
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40004400 	.word	0x40004400

08002f3c <send_char>:

//Sending data over USART:

void send_char(char c, USART_TypeDef* USART)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	71fb      	strb	r3, [r7, #7]
    while (USART_GetFlagStatus(USART, USART_FLAG_TXE) == RESET);
 8002f48:	bf00      	nop
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	6838      	ldr	r0, [r7, #0]
 8002f4e:	f7ff f983 	bl	8002258 <USART_GetFlagStatus>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d0f8      	beq.n	8002f4a <send_char+0xe>
    USART_SendData(USART, c);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f7ff f8f0 	bl	8002144 <USART_SendData>
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <send_string>:

void send_string(const char* s, USART_TypeDef* USART)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
    while (*s)
 8002f76:	e007      	b.n	8002f88 <send_string+0x1c>
        send_char(*s++, USART);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1c5a      	adds	r2, r3, #1
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff ffda 	bl	8002f3c <send_char>
    USART_SendData(USART, c);
}

void send_string(const char* s, USART_TypeDef* USART)
{
    while (*s)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1f3      	bne.n	8002f78 <send_string+0xc>
        send_char(*s++, USART);
}
 8002f90:	bf00      	nop
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <USART2_IRQHandler>:
//
//        *receiveBufferEnd = byte;
//	}
//}

void USART2_IRQHandler (void) {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	   if(USART_GetITStatus(USART2, USART_IT_RXNE))
 8002f9e:	f240 5125 	movw	r1, #1317	; 0x525
 8002fa2:	48c2      	ldr	r0, [pc, #776]	; (80032ac <USART2_IRQHandler+0x314>)
 8002fa4:	f7ff f974 	bl	8002290 <USART_GetITStatus>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8249 	beq.w	8003442 <USART2_IRQHandler+0x4aa>
	   {
		   keyTimeout = 0;
 8002fb0:	4bbf      	ldr	r3, [pc, #764]	; (80032b0 <USART2_IRQHandler+0x318>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
		   char received = USART_ReceiveData(USART2);
 8002fb6:	48bd      	ldr	r0, [pc, #756]	; (80032ac <USART2_IRQHandler+0x314>)
 8002fb8:	f7ff f8d6 	bl	8002168 <USART_ReceiveData>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	71fb      	strb	r3, [r7, #7]
		   send_char(received, USART2);
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	49ba      	ldr	r1, [pc, #744]	; (80032ac <USART2_IRQHandler+0x314>)
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ffb9 	bl	8002f3c <send_char>
		   switch(received)
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	3b61      	subs	r3, #97	; 0x61
 8002fce:	2b16      	cmp	r3, #22
 8002fd0:	f200 820a 	bhi.w	80033e8 <USART2_IRQHandler+0x450>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <USART2_IRQHandler+0x44>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003039 	.word	0x08003039
 8002fe0:	080033e9 	.word	0x080033e9
 8002fe4:	080033e9 	.word	0x080033e9
 8002fe8:	080030bf 	.word	0x080030bf
 8002fec:	080030a1 	.word	0x080030a1
 8002ff0:	080030f7 	.word	0x080030f7
 8002ff4:	08003153 	.word	0x08003153
 8002ff8:	0800318d 	.word	0x0800318d
 8002ffc:	080032e1 	.word	0x080032e1
 8003000:	08003227 	.word	0x08003227
 8003004:	08003367 	.word	0x08003367
 8003008:	080033e9 	.word	0x080033e9
 800300c:	080033e9 	.word	0x080033e9
 8003010:	080033e9 	.word	0x080033e9
 8003014:	080033e9 	.word	0x080033e9
 8003018:	080033e9 	.word	0x080033e9
 800301c:	08003057 	.word	0x08003057
 8003020:	080030dd 	.word	0x080030dd
 8003024:	0800308b 	.word	0x0800308b
 8003028:	08003119 	.word	0x08003119
 800302c:	080031a3 	.word	0x080031a3
 8003030:	080033e9 	.word	0x080033e9
 8003034:	08003075 	.word	0x08003075
		        {
		            case 'a':
		            	GPIO_SetBits(GPIOD, GPIO_Pin_0);
 8003038:	2101      	movs	r1, #1
 800303a:	489e      	ldr	r0, [pc, #632]	; (80032b4 <USART2_IRQHandler+0x31c>)
 800303c:	f7fe f98e 	bl	800135c <GPIO_SetBits>
		            	GPIO_ResetBits(GPIOD, GPIO_Pin_1);
 8003040:	2102      	movs	r1, #2
 8003042:	489c      	ldr	r0, [pc, #624]	; (80032b4 <USART2_IRQHandler+0x31c>)
 8003044:	f7fe f99a 	bl	800137c <GPIO_ResetBits>
		            	TIM_SetCompare1(TIM2,400);
 8003048:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800304c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003050:	f7fe feda 	bl	8001e08 <TIM_SetCompare1>
		                break;
 8003054:	e1ed      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'q':
		            	GPIO_ResetBits(GPIOD, GPIO_Pin_0);
 8003056:	2101      	movs	r1, #1
 8003058:	4896      	ldr	r0, [pc, #600]	; (80032b4 <USART2_IRQHandler+0x31c>)
 800305a:	f7fe f98f 	bl	800137c <GPIO_ResetBits>
		            	GPIO_SetBits(GPIOD, GPIO_Pin_1);
 800305e:	2102      	movs	r1, #2
 8003060:	4894      	ldr	r0, [pc, #592]	; (80032b4 <USART2_IRQHandler+0x31c>)
 8003062:	f7fe f97b 	bl	800135c <GPIO_SetBits>
		            	TIM_SetCompare1(TIM2,400);
 8003066:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800306a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800306e:	f7fe fecb 	bl	8001e08 <TIM_SetCompare1>
		                break;
 8003072:	e1de      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'w':
		            	TIM_SetCompare3(TIM2,250);
 8003074:	21fa      	movs	r1, #250	; 0xfa
 8003076:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800307a:	f7fe fee1 	bl	8001e40 <TIM_SetCompare3>
		            	TIM_SetCompare4(TIM2,0);
 800307e:	2100      	movs	r1, #0
 8003080:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003084:	f7fe feea 	bl	8001e5c <TIM_SetCompare4>
		                break;
 8003088:	e1d3      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 's':
		            	TIM_SetCompare3(TIM2,0);
 800308a:	2100      	movs	r1, #0
 800308c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003090:	f7fe fed6 	bl	8001e40 <TIM_SetCompare3>
		            	TIM_SetCompare4(TIM2,250);
 8003094:	21fa      	movs	r1, #250	; 0xfa
 8003096:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800309a:	f7fe fedf 	bl	8001e5c <TIM_SetCompare4>
		                break;
 800309e:	e1c8      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'e':
		            	GPIO_SetBits(GPIOD, GPIO_Pin_4);
 80030a0:	2110      	movs	r1, #16
 80030a2:	4884      	ldr	r0, [pc, #528]	; (80032b4 <USART2_IRQHandler+0x31c>)
 80030a4:	f7fe f95a 	bl	800135c <GPIO_SetBits>
		            	GPIO_ResetBits(GPIOD, GPIO_Pin_7);
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	4882      	ldr	r0, [pc, #520]	; (80032b4 <USART2_IRQHandler+0x31c>)
 80030ac:	f7fe f966 	bl	800137c <GPIO_ResetBits>
		            	TIM_SetCompare2(TIM2,1000);
 80030b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030b8:	f7fe feb4 	bl	8001e24 <TIM_SetCompare2>
		                break;
 80030bc:	e1b9      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'd':
		            	GPIO_ResetBits(GPIOD, GPIO_Pin_4);
 80030be:	2110      	movs	r1, #16
 80030c0:	487c      	ldr	r0, [pc, #496]	; (80032b4 <USART2_IRQHandler+0x31c>)
 80030c2:	f7fe f95b 	bl	800137c <GPIO_ResetBits>
		            	GPIO_SetBits(GPIOD, GPIO_Pin_7);
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	487a      	ldr	r0, [pc, #488]	; (80032b4 <USART2_IRQHandler+0x31c>)
 80030ca:	f7fe f947 	bl	800135c <GPIO_SetBits>
		            	TIM_SetCompare2(TIM2,1000);
 80030ce:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80030d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80030d6:	f7fe fea5 	bl	8001e24 <TIM_SetCompare2>
		                break;
 80030da:	e1aa      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'r':
		            	GPIO_SetBits(GPIOE, GPIO_Pin_0);
 80030dc:	2101      	movs	r1, #1
 80030de:	4876      	ldr	r0, [pc, #472]	; (80032b8 <USART2_IRQHandler+0x320>)
 80030e0:	f7fe f93c 	bl	800135c <GPIO_SetBits>
		            	GPIO_ResetBits(GPIOE, GPIO_Pin_4);
 80030e4:	2110      	movs	r1, #16
 80030e6:	4874      	ldr	r0, [pc, #464]	; (80032b8 <USART2_IRQHandler+0x320>)
 80030e8:	f7fe f948 	bl	800137c <GPIO_ResetBits>
		            	TIM_SetCompare4(TIM4,200);
 80030ec:	21c8      	movs	r1, #200	; 0xc8
 80030ee:	4873      	ldr	r0, [pc, #460]	; (80032bc <USART2_IRQHandler+0x324>)
 80030f0:	f7fe feb4 	bl	8001e5c <TIM_SetCompare4>
		                break;
 80030f4:	e19d      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'f':
		            	GPIO_ResetBits(GPIOE, GPIO_Pin_0);
 80030f6:	2101      	movs	r1, #1
 80030f8:	486f      	ldr	r0, [pc, #444]	; (80032b8 <USART2_IRQHandler+0x320>)
 80030fa:	f7fe f93f 	bl	800137c <GPIO_ResetBits>
		            	GPIO_SetBits(GPIOE, GPIO_Pin_4);
 80030fe:	2110      	movs	r1, #16
 8003100:	486d      	ldr	r0, [pc, #436]	; (80032b8 <USART2_IRQHandler+0x320>)
 8003102:	f7fe f92b 	bl	800135c <GPIO_SetBits>
		            	GPIO_SetBits(GPIOB, GPIO_Pin_2);
 8003106:	2104      	movs	r1, #4
 8003108:	486d      	ldr	r0, [pc, #436]	; (80032c0 <USART2_IRQHandler+0x328>)
 800310a:	f7fe f927 	bl	800135c <GPIO_SetBits>
		            	TIM_SetCompare4(TIM4,200);
 800310e:	21c8      	movs	r1, #200	; 0xc8
 8003110:	486a      	ldr	r0, [pc, #424]	; (80032bc <USART2_IRQHandler+0x324>)
 8003112:	f7fe fea3 	bl	8001e5c <TIM_SetCompare4>
		                break;
 8003116:	e18c      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 't':
		            	GPIO_ResetBits(GPIOE, GPIO_Pin_3);
 8003118:	2108      	movs	r1, #8
 800311a:	4867      	ldr	r0, [pc, #412]	; (80032b8 <USART2_IRQHandler+0x320>)
 800311c:	f7fe f92e 	bl	800137c <GPIO_ResetBits>
		                GPIO_SetBits(GPIOE, GPIO_Pin_2);
 8003120:	2104      	movs	r1, #4
 8003122:	4865      	ldr	r0, [pc, #404]	; (80032b8 <USART2_IRQHandler+0x320>)
 8003124:	f7fe f91a 	bl	800135c <GPIO_SetBits>
		            	GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 8003128:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800312c:	4865      	ldr	r0, [pc, #404]	; (80032c4 <USART2_IRQHandler+0x32c>)
 800312e:	f7fe f925 	bl	800137c <GPIO_ResetBits>
		                GPIO_SetBits(GPIOC, GPIO_Pin_14);
 8003132:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003136:	4863      	ldr	r0, [pc, #396]	; (80032c4 <USART2_IRQHandler+0x32c>)
 8003138:	f7fe f910 	bl	800135c <GPIO_SetBits>
		                TIM_SetCompare3(TIM4, 300);
 800313c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003140:	485e      	ldr	r0, [pc, #376]	; (80032bc <USART2_IRQHandler+0x324>)
 8003142:	f7fe fe7d 	bl	8001e40 <TIM_SetCompare3>
		            	TIM_SetCompare1(TIM3, 300);
 8003146:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800314a:	485f      	ldr	r0, [pc, #380]	; (80032c8 <USART2_IRQHandler+0x330>)
 800314c:	f7fe fe5c 	bl	8001e08 <TIM_SetCompare1>
		                break;
 8003150:	e16f      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'g':
		            	GPIO_SetBits(GPIOE, GPIO_Pin_3);
 8003152:	2108      	movs	r1, #8
 8003154:	4858      	ldr	r0, [pc, #352]	; (80032b8 <USART2_IRQHandler+0x320>)
 8003156:	f7fe f901 	bl	800135c <GPIO_SetBits>
		                GPIO_ResetBits(GPIOE, GPIO_Pin_2);
 800315a:	2104      	movs	r1, #4
 800315c:	4856      	ldr	r0, [pc, #344]	; (80032b8 <USART2_IRQHandler+0x320>)
 800315e:	f7fe f90d 	bl	800137c <GPIO_ResetBits>
		            	GPIO_SetBits(GPIOC, GPIO_Pin_13);
 8003162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003166:	4857      	ldr	r0, [pc, #348]	; (80032c4 <USART2_IRQHandler+0x32c>)
 8003168:	f7fe f8f8 	bl	800135c <GPIO_SetBits>
		                GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 800316c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003170:	4854      	ldr	r0, [pc, #336]	; (80032c4 <USART2_IRQHandler+0x32c>)
 8003172:	f7fe f903 	bl	800137c <GPIO_ResetBits>
		                TIM_SetCompare1(TIM3, 300);
 8003176:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800317a:	4853      	ldr	r0, [pc, #332]	; (80032c8 <USART2_IRQHandler+0x330>)
 800317c:	f7fe fe44 	bl	8001e08 <TIM_SetCompare1>
		            	TIM_SetCompare3(TIM4, 300);
 8003180:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003184:	484d      	ldr	r0, [pc, #308]	; (80032bc <USART2_IRQHandler+0x324>)
 8003186:	f7fe fe5b 	bl	8001e40 <TIM_SetCompare3>
		                break;
 800318a:	e152      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'h':
		            	TIM_SetCompare1(TIM3,400);
 800318c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003190:	484d      	ldr	r0, [pc, #308]	; (80032c8 <USART2_IRQHandler+0x330>)
 8003192:	f7fe fe39 	bl	8001e08 <TIM_SetCompare1>
		            	TIM_SetCompare2(TIM3,400);
 8003196:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800319a:	484b      	ldr	r0, [pc, #300]	; (80032c8 <USART2_IRQHandler+0x330>)
 800319c:	f7fe fe42 	bl	8001e24 <TIM_SetCompare2>
		            	break;
 80031a0:	e147      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'u':
						angle1+= 1;
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <USART2_IRQHandler+0x334>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b0:	4b46      	ldr	r3, [pc, #280]	; (80032cc <USART2_IRQHandler+0x334>)
 80031b2:	edc3 7a00 	vstr	s15, [r3]
						if(angle1 > 300)
 80031b6:	4b45      	ldr	r3, [pc, #276]	; (80032cc <USART2_IRQHandler+0x334>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80032d0 <USART2_IRQHandler+0x338>
 80031c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c8:	dd02      	ble.n	80031d0 <USART2_IRQHandler+0x238>
						{
							angle1 = 300;
 80031ca:	4b40      	ldr	r3, [pc, #256]	; (80032cc <USART2_IRQHandler+0x334>)
 80031cc:	4a41      	ldr	r2, [pc, #260]	; (80032d4 <USART2_IRQHandler+0x33c>)
 80031ce:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x01, angle1);
 80031d0:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <USART2_IRQHandler+0x334>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eeb0 0a67 	vmov.f32	s0, s15
 80031da:	2001      	movs	r0, #1
 80031dc:	f7ff fa50 	bl	8002680 <setServoAngle>
						angle2-=1;
 80031e0:	4b3d      	ldr	r3, [pc, #244]	; (80032d8 <USART2_IRQHandler+0x340>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031ee:	4b3a      	ldr	r3, [pc, #232]	; (80032d8 <USART2_IRQHandler+0x340>)
 80031f0:	edc3 7a00 	vstr	s15, [r3]
						if(angle2 < 0)
 80031f4:	4b38      	ldr	r3, [pc, #224]	; (80032d8 <USART2_IRQHandler+0x340>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003202:	d503      	bpl.n	800320c <USART2_IRQHandler+0x274>
						{
							angle2 = 0;
 8003204:	4b34      	ldr	r3, [pc, #208]	; (80032d8 <USART2_IRQHandler+0x340>)
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x02,angle2);
 800320c:	4b32      	ldr	r3, [pc, #200]	; (80032d8 <USART2_IRQHandler+0x340>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	eeb0 0a67 	vmov.f32	s0, s15
 8003216:	2002      	movs	r0, #2
 8003218:	f7ff fa32 	bl	8002680 <setServoAngle>
		            	send_string("RS_SEND", USART2);
 800321c:	4923      	ldr	r1, [pc, #140]	; (80032ac <USART2_IRQHandler+0x314>)
 800321e:	482f      	ldr	r0, [pc, #188]	; (80032dc <USART2_IRQHandler+0x344>)
 8003220:	f7ff fea4 	bl	8002f6c <send_string>
		            	break;
 8003224:	e105      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'j':
						angle1-= 1;
 8003226:	4b29      	ldr	r3, [pc, #164]	; (80032cc <USART2_IRQHandler+0x334>)
 8003228:	edd3 7a00 	vldr	s15, [r3]
 800322c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003234:	4b25      	ldr	r3, [pc, #148]	; (80032cc <USART2_IRQHandler+0x334>)
 8003236:	edc3 7a00 	vstr	s15, [r3]
						if(angle1 < 0)
 800323a:	4b24      	ldr	r3, [pc, #144]	; (80032cc <USART2_IRQHandler+0x334>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003248:	d503      	bpl.n	8003252 <USART2_IRQHandler+0x2ba>
						{
							angle1 = 0;
 800324a:	4b20      	ldr	r3, [pc, #128]	; (80032cc <USART2_IRQHandler+0x334>)
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x01, angle1);
 8003252:	4b1e      	ldr	r3, [pc, #120]	; (80032cc <USART2_IRQHandler+0x334>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb0 0a67 	vmov.f32	s0, s15
 800325c:	2001      	movs	r0, #1
 800325e:	f7ff fa0f 	bl	8002680 <setServoAngle>
						angle2+=1;
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <USART2_IRQHandler+0x340>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800326c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <USART2_IRQHandler+0x340>)
 8003272:	edc3 7a00 	vstr	s15, [r3]
						if(angle2 > 300)
 8003276:	4b18      	ldr	r3, [pc, #96]	; (80032d8 <USART2_IRQHandler+0x340>)
 8003278:	edd3 7a00 	vldr	s15, [r3]
 800327c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80032d0 <USART2_IRQHandler+0x338>
 8003280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003288:	dd02      	ble.n	8003290 <USART2_IRQHandler+0x2f8>
						{
							angle2 = 300;
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <USART2_IRQHandler+0x340>)
 800328c:	4a11      	ldr	r2, [pc, #68]	; (80032d4 <USART2_IRQHandler+0x33c>)
 800328e:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x02,angle2);
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <USART2_IRQHandler+0x340>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eeb0 0a67 	vmov.f32	s0, s15
 800329a:	2002      	movs	r0, #2
 800329c:	f7ff f9f0 	bl	8002680 <setServoAngle>
		            	send_string("RS_SEND", USART2);
 80032a0:	4902      	ldr	r1, [pc, #8]	; (80032ac <USART2_IRQHandler+0x314>)
 80032a2:	480e      	ldr	r0, [pc, #56]	; (80032dc <USART2_IRQHandler+0x344>)
 80032a4:	f7ff fe62 	bl	8002f6c <send_string>
		            	break;
 80032a8:	e0c3      	b.n	8003432 <USART2_IRQHandler+0x49a>
 80032aa:	bf00      	nop
 80032ac:	40004400 	.word	0x40004400
 80032b0:	2000003c 	.word	0x2000003c
 80032b4:	40020c00 	.word	0x40020c00
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40000800 	.word	0x40000800
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800
 80032c8:	40000400 	.word	0x40000400
 80032cc:	20000018 	.word	0x20000018
 80032d0:	43960000 	.word	0x43960000
 80032d4:	43960000 	.word	0x43960000
 80032d8:	2000001c 	.word	0x2000001c
 80032dc:	08003df4 	.word	0x08003df4
		            case 'i':
						angle1+= 1;
 80032e0:	4b5a      	ldr	r3, [pc, #360]	; (800344c <USART2_IRQHandler+0x4b4>)
 80032e2:	edd3 7a00 	vldr	s15, [r3]
 80032e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032ee:	4b57      	ldr	r3, [pc, #348]	; (800344c <USART2_IRQHandler+0x4b4>)
 80032f0:	edc3 7a00 	vstr	s15, [r3]
						if(angle1 > 300)
 80032f4:	4b55      	ldr	r3, [pc, #340]	; (800344c <USART2_IRQHandler+0x4b4>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8003450 <USART2_IRQHandler+0x4b8>
 80032fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003306:	dd02      	ble.n	800330e <USART2_IRQHandler+0x376>
						{
							angle1 = 300;
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <USART2_IRQHandler+0x4b4>)
 800330a:	4a52      	ldr	r2, [pc, #328]	; (8003454 <USART2_IRQHandler+0x4bc>)
 800330c:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x01, angle1);
 800330e:	4b4f      	ldr	r3, [pc, #316]	; (800344c <USART2_IRQHandler+0x4b4>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	eeb0 0a67 	vmov.f32	s0, s15
 8003318:	2001      	movs	r0, #1
 800331a:	f7ff f9b1 	bl	8002680 <setServoAngle>
						angle2+=1;
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <USART2_IRQHandler+0x4c0>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003328:	ee77 7a87 	vadd.f32	s15, s15, s14
 800332c:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <USART2_IRQHandler+0x4c0>)
 800332e:	edc3 7a00 	vstr	s15, [r3]
						if(angle2 > 300)
 8003332:	4b49      	ldr	r3, [pc, #292]	; (8003458 <USART2_IRQHandler+0x4c0>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003450 <USART2_IRQHandler+0x4b8>
 800333c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003344:	dd02      	ble.n	800334c <USART2_IRQHandler+0x3b4>
						{
							angle2 = 300;
 8003346:	4b44      	ldr	r3, [pc, #272]	; (8003458 <USART2_IRQHandler+0x4c0>)
 8003348:	4a42      	ldr	r2, [pc, #264]	; (8003454 <USART2_IRQHandler+0x4bc>)
 800334a:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x02,angle2);
 800334c:	4b42      	ldr	r3, [pc, #264]	; (8003458 <USART2_IRQHandler+0x4c0>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	2002      	movs	r0, #2
 8003358:	f7ff f992 	bl	8002680 <setServoAngle>
		            	send_string("RS_SEND", USART2);
 800335c:	493f      	ldr	r1, [pc, #252]	; (800345c <USART2_IRQHandler+0x4c4>)
 800335e:	4840      	ldr	r0, [pc, #256]	; (8003460 <USART2_IRQHandler+0x4c8>)
 8003360:	f7ff fe04 	bl	8002f6c <send_string>
		            	break;
 8003364:	e065      	b.n	8003432 <USART2_IRQHandler+0x49a>
		            case 'k':
						angle1-= 1;
 8003366:	4b39      	ldr	r3, [pc, #228]	; (800344c <USART2_IRQHandler+0x4b4>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003374:	4b35      	ldr	r3, [pc, #212]	; (800344c <USART2_IRQHandler+0x4b4>)
 8003376:	edc3 7a00 	vstr	s15, [r3]
						if(angle1 < 0)
 800337a:	4b34      	ldr	r3, [pc, #208]	; (800344c <USART2_IRQHandler+0x4b4>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	d503      	bpl.n	8003392 <USART2_IRQHandler+0x3fa>
						{
							angle1 = 0;
 800338a:	4b30      	ldr	r3, [pc, #192]	; (800344c <USART2_IRQHandler+0x4b4>)
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x01, angle1);
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <USART2_IRQHandler+0x4b4>)
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	eeb0 0a67 	vmov.f32	s0, s15
 800339c:	2001      	movs	r0, #1
 800339e:	f7ff f96f 	bl	8002680 <setServoAngle>
						angle2-=1;
 80033a2:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <USART2_IRQHandler+0x4c0>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033b0:	4b29      	ldr	r3, [pc, #164]	; (8003458 <USART2_IRQHandler+0x4c0>)
 80033b2:	edc3 7a00 	vstr	s15, [r3]
						if(angle2 < 0)
 80033b6:	4b28      	ldr	r3, [pc, #160]	; (8003458 <USART2_IRQHandler+0x4c0>)
 80033b8:	edd3 7a00 	vldr	s15, [r3]
 80033bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	d503      	bpl.n	80033ce <USART2_IRQHandler+0x436>
						{
							angle2 = 0;
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <USART2_IRQHandler+0x4c0>)
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
						}
						setServoAngle(0x02,angle2);
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <USART2_IRQHandler+0x4c0>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eeb0 0a67 	vmov.f32	s0, s15
 80033d8:	2002      	movs	r0, #2
 80033da:	f7ff f951 	bl	8002680 <setServoAngle>
		            	send_string("RS_SEND", USART2);
 80033de:	491f      	ldr	r1, [pc, #124]	; (800345c <USART2_IRQHandler+0x4c4>)
 80033e0:	481f      	ldr	r0, [pc, #124]	; (8003460 <USART2_IRQHandler+0x4c8>)
 80033e2:	f7ff fdc3 	bl	8002f6c <send_string>
		            	break;
 80033e6:	e024      	b.n	8003432 <USART2_IRQHandler+0x49a>

		            default:
		            	TIM_SetCompare1(TIM2,0);
 80033e8:	2100      	movs	r1, #0
 80033ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80033ee:	f7fe fd0b 	bl	8001e08 <TIM_SetCompare1>
		            	TIM_SetCompare2(TIM2,0);
 80033f2:	2100      	movs	r1, #0
 80033f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80033f8:	f7fe fd14 	bl	8001e24 <TIM_SetCompare2>
		            	TIM_SetCompare3(TIM2,0);
 80033fc:	2100      	movs	r1, #0
 80033fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003402:	f7fe fd1d 	bl	8001e40 <TIM_SetCompare3>
		            	TIM_SetCompare4(TIM2,0);
 8003406:	2100      	movs	r1, #0
 8003408:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800340c:	f7fe fd26 	bl	8001e5c <TIM_SetCompare4>
		            	TIM_SetCompare1(TIM3,0);
 8003410:	2100      	movs	r1, #0
 8003412:	4814      	ldr	r0, [pc, #80]	; (8003464 <USART2_IRQHandler+0x4cc>)
 8003414:	f7fe fcf8 	bl	8001e08 <TIM_SetCompare1>
		            	TIM_SetCompare2(TIM3,0);
 8003418:	2100      	movs	r1, #0
 800341a:	4812      	ldr	r0, [pc, #72]	; (8003464 <USART2_IRQHandler+0x4cc>)
 800341c:	f7fe fd02 	bl	8001e24 <TIM_SetCompare2>
		            	TIM_SetCompare3(TIM4,0);
 8003420:	2100      	movs	r1, #0
 8003422:	4811      	ldr	r0, [pc, #68]	; (8003468 <USART2_IRQHandler+0x4d0>)
 8003424:	f7fe fd0c 	bl	8001e40 <TIM_SetCompare3>
		            	TIM_SetCompare4(TIM4,0);
 8003428:	2100      	movs	r1, #0
 800342a:	480f      	ldr	r0, [pc, #60]	; (8003468 <USART2_IRQHandler+0x4d0>)
 800342c:	f7fe fd16 	bl	8001e5c <TIM_SetCompare4>
		                break;
 8003430:	bf00      	nop
		        }
	      USART_ClearITPendingBit(USART2, USART_FLAG_RXNE);
 8003432:	2120      	movs	r1, #32
 8003434:	4809      	ldr	r0, [pc, #36]	; (800345c <USART2_IRQHandler+0x4c4>)
 8003436:	f7fe ff87 	bl	8002348 <USART_ClearITPendingBit>
	      GPIO_ResetBits(GPIOB, GPIO_Pin_2);
 800343a:	2104      	movs	r1, #4
 800343c:	480b      	ldr	r0, [pc, #44]	; (800346c <USART2_IRQHandler+0x4d4>)
 800343e:	f7fd ff9d 	bl	800137c <GPIO_ResetBits>
	   }
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	20000018 	.word	0x20000018
 8003450:	43960000 	.word	0x43960000
 8003454:	43960000 	.word	0x43960000
 8003458:	2000001c 	.word	0x2000001c
 800345c:	40004400 	.word	0x40004400
 8003460:	08003df4 	.word	0x08003df4
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40020400 	.word	0x40020400

08003470 <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
	if (CAN_GetITStatus(CAN1, CAN_IT_FMP0) != RESET) {
 8003476:	2102      	movs	r1, #2
 8003478:	48af      	ldr	r0, [pc, #700]	; (8003738 <CAN1_RX0_IRQHandler+0x2c8>)
 800347a:	f7fd fd8f 	bl	8000f9c <CAN_GetITStatus>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 82d0 	beq.w	8003a26 <CAN1_RX0_IRQHandler+0x5b6>
		CAN_ClearITPendingBit(CAN1, CAN_IT_FMP0);
 8003486:	2102      	movs	r1, #2
 8003488:	48ab      	ldr	r0, [pc, #684]	; (8003738 <CAN1_RX0_IRQHandler+0x2c8>)
 800348a:	f7fd fe51 	bl	8001130 <CAN_ClearITPendingBit>
		//odebrane dane w strukturze 'rxMessage'
		CAN_Receive(CAN1, CAN_FIFO0, &rxMessage);
 800348e:	4aab      	ldr	r2, [pc, #684]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 8003490:	2100      	movs	r1, #0
 8003492:	48a9      	ldr	r0, [pc, #676]	; (8003738 <CAN1_RX0_IRQHandler+0x2c8>)
 8003494:	f7fd fcaa 	bl	8000dec <CAN_Receive>
		int8_t temp = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	71fb      	strb	r3, [r7, #7]
		switch (rxMessage.StdId) {
 800349c:	4ba7      	ldr	r3, [pc, #668]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2ba0      	cmp	r3, #160	; 0xa0
 80034a2:	d00e      	beq.n	80034c2 <CAN1_RX0_IRQHandler+0x52>
 80034a4:	2ba2      	cmp	r3, #162	; 0xa2
 80034a6:	f000 82b5 	beq.w	8003a14 <CAN1_RX0_IRQHandler+0x5a4>
 80034aa:	2b65      	cmp	r3, #101	; 0x65
 80034ac:	d000      	beq.n	80034b0 <CAN1_RX0_IRQHandler+0x40>
			//Motors start/stop:
			keyTimeout = 0;
			sendStartStop(rxMessage.Data[0]);
			break;
		default:
			break;
 80034ae:	e2ba      	b.n	8003a26 <CAN1_RX0_IRQHandler+0x5b6>
		CAN_Receive(CAN1, CAN_FIFO0, &rxMessage);
		int8_t temp = 0;
		switch (rxMessage.StdId) {
		case 101:
			//Motors start/stop:
			keyTimeout = 0;
 80034b0:	4ba3      	ldr	r3, [pc, #652]	; (8003740 <CAN1_RX0_IRQHandler+0x2d0>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
			sendStartStop(rxMessage.Data[0]);
 80034b6:	4ba1      	ldr	r3, [pc, #644]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 80034b8:	7adb      	ldrb	r3, [r3, #11]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 fad4 	bl	8003a68 <sendStartStop>
			break;
 80034c0:	e2b1      	b.n	8003a26 <CAN1_RX0_IRQHandler+0x5b6>
		case 160:
			//Set motors velocity:
			keyTimeout = 0;
 80034c2:	4b9f      	ldr	r3, [pc, #636]	; (8003740 <CAN1_RX0_IRQHandler+0x2d0>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
			temp = rxMessage.Data[0];
 80034c8:	4b9c      	ldr	r3, [pc, #624]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 80034ca:	7adb      	ldrb	r3, [r3, #11]
 80034cc:	71fb      	strb	r3, [r7, #7]
			baseSpeed = temp*1000/100;
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	4a9a      	ldr	r2, [pc, #616]	; (8003744 <CAN1_RX0_IRQHandler+0x2d4>)
 80034dc:	fb82 1203 	smull	r1, r2, r2, r3
 80034e0:	1152      	asrs	r2, r2, #5
 80034e2:	17db      	asrs	r3, r3, #31
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	b21a      	sxth	r2, r3
 80034e8:	4b97      	ldr	r3, [pc, #604]	; (8003748 <CAN1_RX0_IRQHandler+0x2d8>)
 80034ea:	801a      	strh	r2, [r3, #0]
			if(baseSpeed < 0)
 80034ec:	4b96      	ldr	r3, [pc, #600]	; (8003748 <CAN1_RX0_IRQHandler+0x2d8>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	b21b      	sxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	da11      	bge.n	800351a <CAN1_RX0_IRQHandler+0xaa>
			{
				GPIO_SetBits(GPIOD, GPIO_Pin_0);
 80034f6:	2101      	movs	r1, #1
 80034f8:	4894      	ldr	r0, [pc, #592]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 80034fa:	f7fd ff2f 	bl	800135c <GPIO_SetBits>
				GPIO_ResetBits(GPIOD, GPIO_Pin_1);
 80034fe:	2102      	movs	r1, #2
 8003500:	4892      	ldr	r0, [pc, #584]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 8003502:	f7fd ff3b 	bl	800137c <GPIO_ResetBits>
				baseSpeed = (-1)*baseSpeed;
 8003506:	4b90      	ldr	r3, [pc, #576]	; (8003748 <CAN1_RX0_IRQHandler+0x2d8>)
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	b21b      	sxth	r3, r3
 800350c:	b29b      	uxth	r3, r3
 800350e:	425b      	negs	r3, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	b21a      	sxth	r2, r3
 8003514:	4b8c      	ldr	r3, [pc, #560]	; (8003748 <CAN1_RX0_IRQHandler+0x2d8>)
 8003516:	801a      	strh	r2, [r3, #0]
 8003518:	e007      	b.n	800352a <CAN1_RX0_IRQHandler+0xba>
			}
			else
			{
				GPIO_ResetBits(GPIOD, GPIO_Pin_0);
 800351a:	2101      	movs	r1, #1
 800351c:	488b      	ldr	r0, [pc, #556]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 800351e:	f7fd ff2d 	bl	800137c <GPIO_ResetBits>
				GPIO_SetBits(GPIOD, GPIO_Pin_1);
 8003522:	2102      	movs	r1, #2
 8003524:	4889      	ldr	r0, [pc, #548]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 8003526:	f7fd ff19 	bl	800135c <GPIO_SetBits>
			}
		    TIM_SetCompare1(TIM2,baseSpeed);
 800352a:	4b87      	ldr	r3, [pc, #540]	; (8003748 <CAN1_RX0_IRQHandler+0x2d8>)
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b21b      	sxth	r3, r3
 8003530:	4619      	mov	r1, r3
 8003532:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003536:	f7fe fc67 	bl	8001e08 <TIM_SetCompare1>

		    temp = rxMessage.Data[1];
 800353a:	4b80      	ldr	r3, [pc, #512]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 800353c:	7b1b      	ldrb	r3, [r3, #12]
 800353e:	71fb      	strb	r3, [r7, #7]
		    int forearmSpeed = temp*1000/100;
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003548:	fb02 f303 	mul.w	r3, r2, r3
 800354c:	4a7d      	ldr	r2, [pc, #500]	; (8003744 <CAN1_RX0_IRQHandler+0x2d4>)
 800354e:	fb82 1203 	smull	r1, r2, r2, r3
 8003552:	1152      	asrs	r2, r2, #5
 8003554:	17db      	asrs	r3, r3, #31
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	603b      	str	r3, [r7, #0]
			if(forearmSpeed < 0)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	da0e      	bge.n	800357e <CAN1_RX0_IRQHandler+0x10e>
			{
				forearmSpeed = (-1)*forearmSpeed;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	425b      	negs	r3, r3
 8003564:	603b      	str	r3, [r7, #0]
            	TIM_SetCompare3(TIM2,forearmSpeed);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	4619      	mov	r1, r3
 800356a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800356e:	f7fe fc67 	bl	8001e40 <TIM_SetCompare3>
            	TIM_SetCompare4(TIM2,0);
 8003572:	2100      	movs	r1, #0
 8003574:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003578:	f7fe fc70 	bl	8001e5c <TIM_SetCompare4>
 800357c:	e00a      	b.n	8003594 <CAN1_RX0_IRQHandler+0x124>
			}
			else
			{
            	TIM_SetCompare3(TIM2,0);
 800357e:	2100      	movs	r1, #0
 8003580:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003584:	f7fe fc5c 	bl	8001e40 <TIM_SetCompare3>
            	TIM_SetCompare4(TIM2,forearmSpeed);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003590:	f7fe fc64 	bl	8001e5c <TIM_SetCompare4>
			}

			temp = rxMessage.Data[2];
 8003594:	4b69      	ldr	r3, [pc, #420]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 8003596:	7b5b      	ldrb	r3, [r3, #13]
 8003598:	71fb      	strb	r3, [r7, #7]
			armSpeed = temp*1000/100;
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035a2:	fb02 f303 	mul.w	r3, r2, r3
 80035a6:	4a67      	ldr	r2, [pc, #412]	; (8003744 <CAN1_RX0_IRQHandler+0x2d4>)
 80035a8:	fb82 1203 	smull	r1, r2, r2, r3
 80035ac:	1152      	asrs	r2, r2, #5
 80035ae:	17db      	asrs	r3, r3, #31
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	b21a      	sxth	r2, r3
 80035b4:	4b66      	ldr	r3, [pc, #408]	; (8003750 <CAN1_RX0_IRQHandler+0x2e0>)
 80035b6:	801a      	strh	r2, [r3, #0]
			if(armSpeed < 0)
 80035b8:	4b65      	ldr	r3, [pc, #404]	; (8003750 <CAN1_RX0_IRQHandler+0x2e0>)
 80035ba:	881b      	ldrh	r3, [r3, #0]
 80035bc:	b21b      	sxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	da11      	bge.n	80035e6 <CAN1_RX0_IRQHandler+0x176>
			{
				armSpeed = (-1)*armSpeed;
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <CAN1_RX0_IRQHandler+0x2e0>)
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	b21b      	sxth	r3, r3
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	425b      	negs	r3, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21a      	sxth	r2, r3
 80035d0:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <CAN1_RX0_IRQHandler+0x2e0>)
 80035d2:	801a      	strh	r2, [r3, #0]
            	GPIO_SetBits(GPIOD, GPIO_Pin_4);
 80035d4:	2110      	movs	r1, #16
 80035d6:	485d      	ldr	r0, [pc, #372]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 80035d8:	f7fd fec0 	bl	800135c <GPIO_SetBits>
            	GPIO_ResetBits(GPIOD, GPIO_Pin_7);
 80035dc:	2180      	movs	r1, #128	; 0x80
 80035de:	485b      	ldr	r0, [pc, #364]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 80035e0:	f7fd fecc 	bl	800137c <GPIO_ResetBits>
 80035e4:	e007      	b.n	80035f6 <CAN1_RX0_IRQHandler+0x186>
			}
			else
			{
            	GPIO_ResetBits(GPIOD, GPIO_Pin_4);
 80035e6:	2110      	movs	r1, #16
 80035e8:	4858      	ldr	r0, [pc, #352]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 80035ea:	f7fd fec7 	bl	800137c <GPIO_ResetBits>
            	GPIO_SetBits(GPIOD, GPIO_Pin_7);
 80035ee:	2180      	movs	r1, #128	; 0x80
 80035f0:	4856      	ldr	r0, [pc, #344]	; (800374c <CAN1_RX0_IRQHandler+0x2dc>)
 80035f2:	f7fd feb3 	bl	800135c <GPIO_SetBits>
			}
			TIM_SetCompare2(TIM2,armSpeed);
 80035f6:	4b56      	ldr	r3, [pc, #344]	; (8003750 <CAN1_RX0_IRQHandler+0x2e0>)
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b21b      	sxth	r3, r3
 80035fc:	4619      	mov	r1, r3
 80035fe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003602:	f7fe fc0f 	bl	8001e24 <TIM_SetCompare2>

			temp = rxMessage.Data[3];
 8003606:	4b4d      	ldr	r3, [pc, #308]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 8003608:	7b9b      	ldrb	r3, [r3, #14]
 800360a:	71fb      	strb	r3, [r7, #7]
			wristRotateSpeed = temp*1000/100;
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003614:	fb02 f303 	mul.w	r3, r2, r3
 8003618:	4a4a      	ldr	r2, [pc, #296]	; (8003744 <CAN1_RX0_IRQHandler+0x2d4>)
 800361a:	fb82 1203 	smull	r1, r2, r2, r3
 800361e:	1152      	asrs	r2, r2, #5
 8003620:	17db      	asrs	r3, r3, #31
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	b21a      	sxth	r2, r3
 8003626:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <CAN1_RX0_IRQHandler+0x2e4>)
 8003628:	801a      	strh	r2, [r3, #0]
			if(wristRotateSpeed < 0)
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <CAN1_RX0_IRQHandler+0x2e4>)
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b21b      	sxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	da11      	bge.n	8003658 <CAN1_RX0_IRQHandler+0x1e8>
			{
				wristRotateSpeed = (-1)*wristRotateSpeed;
 8003634:	4b47      	ldr	r3, [pc, #284]	; (8003754 <CAN1_RX0_IRQHandler+0x2e4>)
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b21b      	sxth	r3, r3
 800363a:	b29b      	uxth	r3, r3
 800363c:	425b      	negs	r3, r3
 800363e:	b29b      	uxth	r3, r3
 8003640:	b21a      	sxth	r2, r3
 8003642:	4b44      	ldr	r3, [pc, #272]	; (8003754 <CAN1_RX0_IRQHandler+0x2e4>)
 8003644:	801a      	strh	r2, [r3, #0]
            	GPIO_SetBits(GPIOE, GPIO_Pin_0);
 8003646:	2101      	movs	r1, #1
 8003648:	4843      	ldr	r0, [pc, #268]	; (8003758 <CAN1_RX0_IRQHandler+0x2e8>)
 800364a:	f7fd fe87 	bl	800135c <GPIO_SetBits>
            	GPIO_ResetBits(GPIOE, GPIO_Pin_4);
 800364e:	2110      	movs	r1, #16
 8003650:	4841      	ldr	r0, [pc, #260]	; (8003758 <CAN1_RX0_IRQHandler+0x2e8>)
 8003652:	f7fd fe93 	bl	800137c <GPIO_ResetBits>
 8003656:	e007      	b.n	8003668 <CAN1_RX0_IRQHandler+0x1f8>
			}
			else
			{
            	GPIO_ResetBits(GPIOE, GPIO_Pin_0);
 8003658:	2101      	movs	r1, #1
 800365a:	483f      	ldr	r0, [pc, #252]	; (8003758 <CAN1_RX0_IRQHandler+0x2e8>)
 800365c:	f7fd fe8e 	bl	800137c <GPIO_ResetBits>
            	GPIO_SetBits(GPIOE, GPIO_Pin_4);
 8003660:	2110      	movs	r1, #16
 8003662:	483d      	ldr	r0, [pc, #244]	; (8003758 <CAN1_RX0_IRQHandler+0x2e8>)
 8003664:	f7fd fe7a 	bl	800135c <GPIO_SetBits>
			}
			TIM_SetCompare4(TIM4,wristRotateSpeed);
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <CAN1_RX0_IRQHandler+0x2e4>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	b21b      	sxth	r3, r3
 800366e:	4619      	mov	r1, r3
 8003670:	483a      	ldr	r0, [pc, #232]	; (800375c <CAN1_RX0_IRQHandler+0x2ec>)
 8003672:	f7fe fbf3 	bl	8001e5c <TIM_SetCompare4>

			temp = rxMessage.Data[4];
 8003676:	4b31      	ldr	r3, [pc, #196]	; (800373c <CAN1_RX0_IRQHandler+0x2cc>)
 8003678:	7bdb      	ldrb	r3, [r3, #15]
 800367a:	71fb      	strb	r3, [r7, #7]
			wristPitchSpeed = (float)temp/10;
 800367c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003680:	ee07 3a90 	vmov	s15, r3
 8003684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003688:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800368c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003690:	4b33      	ldr	r3, [pc, #204]	; (8003760 <CAN1_RX0_IRQHandler+0x2f0>)
 8003692:	edc3 7a00 	vstr	s15, [r3]
			if(wristPitchSpeed < 0)
 8003696:	4b32      	ldr	r3, [pc, #200]	; (8003760 <CAN1_RX0_IRQHandler+0x2f0>)
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a4:	d566      	bpl.n	8003774 <CAN1_RX0_IRQHandler+0x304>
			{
				wristPitchSpeed = (-1)*wristPitchSpeed;
 80036a6:	4b2e      	ldr	r3, [pc, #184]	; (8003760 <CAN1_RX0_IRQHandler+0x2f0>)
 80036a8:	edd3 7a00 	vldr	s15, [r3]
 80036ac:	eef1 7a67 	vneg.f32	s15, s15
 80036b0:	4b2b      	ldr	r3, [pc, #172]	; (8003760 <CAN1_RX0_IRQHandler+0x2f0>)
 80036b2:	edc3 7a00 	vstr	s15, [r3]
				angle1+= wristPitchSpeed;
 80036b6:	4b2a      	ldr	r3, [pc, #168]	; (8003760 <CAN1_RX0_IRQHandler+0x2f0>)
 80036b8:	ed93 7a00 	vldr	s14, [r3]
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <CAN1_RX0_IRQHandler+0x2f4>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036c6:	4b27      	ldr	r3, [pc, #156]	; (8003764 <CAN1_RX0_IRQHandler+0x2f4>)
 80036c8:	edc3 7a00 	vstr	s15, [r3]
				if(angle1 > 300)
 80036cc:	4b25      	ldr	r3, [pc, #148]	; (8003764 <CAN1_RX0_IRQHandler+0x2f4>)
 80036ce:	edd3 7a00 	vldr	s15, [r3]
 80036d2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003768 <CAN1_RX0_IRQHandler+0x2f8>
 80036d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	dd02      	ble.n	80036e6 <CAN1_RX0_IRQHandler+0x276>
				{
					angle1 = 300;
 80036e0:	4b20      	ldr	r3, [pc, #128]	; (8003764 <CAN1_RX0_IRQHandler+0x2f4>)
 80036e2:	4a22      	ldr	r2, [pc, #136]	; (800376c <CAN1_RX0_IRQHandler+0x2fc>)
 80036e4:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x01, angle1);
 80036e6:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <CAN1_RX0_IRQHandler+0x2f4>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	eeb0 0a67 	vmov.f32	s0, s15
 80036f0:	2001      	movs	r0, #1
 80036f2:	f7fe ffc5 	bl	8002680 <setServoAngle>
				angle2-= wristPitchSpeed;
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <CAN1_RX0_IRQHandler+0x2f0>)
 80036f8:	edd3 7a00 	vldr	s15, [r3]
 80036fc:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <CAN1_RX0_IRQHandler+0x300>)
 80036fe:	ed93 7a00 	vldr	s14, [r3]
 8003702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003706:	4b1a      	ldr	r3, [pc, #104]	; (8003770 <CAN1_RX0_IRQHandler+0x300>)
 8003708:	edc3 7a00 	vstr	s15, [r3]
				if(angle2 < 0)
 800370c:	4b18      	ldr	r3, [pc, #96]	; (8003770 <CAN1_RX0_IRQHandler+0x300>)
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371a:	d503      	bpl.n	8003724 <CAN1_RX0_IRQHandler+0x2b4>
				{
					angle2 = 0;
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <CAN1_RX0_IRQHandler+0x300>)
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x02,angle2);
 8003724:	4b12      	ldr	r3, [pc, #72]	; (8003770 <CAN1_RX0_IRQHandler+0x300>)
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	eeb0 0a67 	vmov.f32	s0, s15
 800372e:	2002      	movs	r0, #2
 8003730:	f7fe ffa6 	bl	8002680 <setServoAngle>
 8003734:	e065      	b.n	8003802 <CAN1_RX0_IRQHandler+0x392>
 8003736:	bf00      	nop
 8003738:	40006400 	.word	0x40006400
 800373c:	20000068 	.word	0x20000068
 8003740:	2000003c 	.word	0x2000003c
 8003744:	51eb851f 	.word	0x51eb851f
 8003748:	20000040 	.word	0x20000040
 800374c:	40020c00 	.word	0x40020c00
 8003750:	20000042 	.word	0x20000042
 8003754:	20000044 	.word	0x20000044
 8003758:	40021000 	.word	0x40021000
 800375c:	40000800 	.word	0x40000800
 8003760:	20000048 	.word	0x20000048
 8003764:	20000018 	.word	0x20000018
 8003768:	43960000 	.word	0x43960000
 800376c:	43960000 	.word	0x43960000
 8003770:	2000001c 	.word	0x2000001c
//				uint16_t firstServoSpeed = ((1023*wristPitchSpeed)/100);
//				uint16_t secondServoSpeed = ((1023*wristPitchSpeed)/100) + 1024;
//            	setServoSpeed(0x02, (uint8_t)(firstServoSpeed >> 8), (uint8_t)(firstServoSpeed));
//            	setServoSpeed(0x01, (uint8_t)(secondServoSpeed >> 8), (uint8_t)(secondServoSpeed));
			}
			else if(wristPitchSpeed > 0)
 8003774:	4bae      	ldr	r3, [pc, #696]	; (8003a30 <CAN1_RX0_IRQHandler+0x5c0>)
 8003776:	edd3 7a00 	vldr	s15, [r3]
 800377a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	dd3e      	ble.n	8003802 <CAN1_RX0_IRQHandler+0x392>
			{
				angle1-= wristPitchSpeed;
 8003784:	4baa      	ldr	r3, [pc, #680]	; (8003a30 <CAN1_RX0_IRQHandler+0x5c0>)
 8003786:	edd3 7a00 	vldr	s15, [r3]
 800378a:	4baa      	ldr	r3, [pc, #680]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 800378c:	ed93 7a00 	vldr	s14, [r3]
 8003790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003794:	4ba7      	ldr	r3, [pc, #668]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 8003796:	edc3 7a00 	vstr	s15, [r3]
				if(angle1 < 0)
 800379a:	4ba6      	ldr	r3, [pc, #664]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	d503      	bpl.n	80037b2 <CAN1_RX0_IRQHandler+0x342>
				{
					angle1 = 0;
 80037aa:	4ba2      	ldr	r3, [pc, #648]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 80037ac:	f04f 0200 	mov.w	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x01, angle1);
 80037b2:	4ba0      	ldr	r3, [pc, #640]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	eeb0 0a67 	vmov.f32	s0, s15
 80037bc:	2001      	movs	r0, #1
 80037be:	f7fe ff5f 	bl	8002680 <setServoAngle>
				angle2+=wristPitchSpeed;
 80037c2:	4b9b      	ldr	r3, [pc, #620]	; (8003a30 <CAN1_RX0_IRQHandler+0x5c0>)
 80037c4:	ed93 7a00 	vldr	s14, [r3]
 80037c8:	4b9b      	ldr	r3, [pc, #620]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d2:	4b99      	ldr	r3, [pc, #612]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80037d4:	edc3 7a00 	vstr	s15, [r3]
				if(angle2 > 300)
 80037d8:	4b97      	ldr	r3, [pc, #604]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
 80037de:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8003a3c <CAN1_RX0_IRQHandler+0x5cc>
 80037e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ea:	dd02      	ble.n	80037f2 <CAN1_RX0_IRQHandler+0x382>
				{
					angle2 = 300;
 80037ec:	4b92      	ldr	r3, [pc, #584]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80037ee:	4a94      	ldr	r2, [pc, #592]	; (8003a40 <CAN1_RX0_IRQHandler+0x5d0>)
 80037f0:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x02,angle2);
 80037f2:	4b91      	ldr	r3, [pc, #580]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	eeb0 0a67 	vmov.f32	s0, s15
 80037fc:	2002      	movs	r0, #2
 80037fe:	f7fe ff3f 	bl	8002680 <setServoAngle>
			}

			temp = rxMessage.Data[5];
 8003802:	4b90      	ldr	r3, [pc, #576]	; (8003a44 <CAN1_RX0_IRQHandler+0x5d4>)
 8003804:	7c1b      	ldrb	r3, [r3, #16]
 8003806:	71fb      	strb	r3, [r7, #7]
			wristRollSpeed = (float)temp/10;
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003814:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800381c:	4b8a      	ldr	r3, [pc, #552]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 800381e:	edc3 7a00 	vstr	s15, [r3]
			if(wristRollSpeed < 0)
 8003822:	4b89      	ldr	r3, [pc, #548]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
 8003828:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d548      	bpl.n	80038c4 <CAN1_RX0_IRQHandler+0x454>
			{
				wristRollSpeed = (-1)*wristRollSpeed;
 8003832:	4b85      	ldr	r3, [pc, #532]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 8003834:	edd3 7a00 	vldr	s15, [r3]
 8003838:	eef1 7a67 	vneg.f32	s15, s15
 800383c:	4b82      	ldr	r3, [pc, #520]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 800383e:	edc3 7a00 	vstr	s15, [r3]
				angle1+= wristRollSpeed;
 8003842:	4b81      	ldr	r3, [pc, #516]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 8003844:	ed93 7a00 	vldr	s14, [r3]
 8003848:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	4b78      	ldr	r3, [pc, #480]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 8003854:	edc3 7a00 	vstr	s15, [r3]
				if(angle1 > 300)
 8003858:	4b76      	ldr	r3, [pc, #472]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003a3c <CAN1_RX0_IRQHandler+0x5cc>
 8003862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800386a:	dd02      	ble.n	8003872 <CAN1_RX0_IRQHandler+0x402>
				{
					angle1 = 300;
 800386c:	4b71      	ldr	r3, [pc, #452]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 800386e:	4a74      	ldr	r2, [pc, #464]	; (8003a40 <CAN1_RX0_IRQHandler+0x5d0>)
 8003870:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x01, angle1);
 8003872:	4b70      	ldr	r3, [pc, #448]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	eeb0 0a67 	vmov.f32	s0, s15
 800387c:	2001      	movs	r0, #1
 800387e:	f7fe feff 	bl	8002680 <setServoAngle>
				angle2+=wristRollSpeed;
 8003882:	4b71      	ldr	r3, [pc, #452]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4b6b      	ldr	r3, [pc, #428]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 800388a:	edd3 7a00 	vldr	s15, [r3]
 800388e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003892:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 8003894:	edc3 7a00 	vstr	s15, [r3]
				if(angle2 > 300)
 8003898:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8003a3c <CAN1_RX0_IRQHandler+0x5cc>
 80038a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	dd02      	ble.n	80038b2 <CAN1_RX0_IRQHandler+0x442>
				{
					angle2 = 300;
 80038ac:	4b62      	ldr	r3, [pc, #392]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80038ae:	4a64      	ldr	r2, [pc, #400]	; (8003a40 <CAN1_RX0_IRQHandler+0x5d0>)
 80038b0:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x02,angle2);
 80038b2:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	eeb0 0a67 	vmov.f32	s0, s15
 80038bc:	2002      	movs	r0, #2
 80038be:	f7fe fedf 	bl	8002680 <setServoAngle>
 80038c2:	e045      	b.n	8003950 <CAN1_RX0_IRQHandler+0x4e0>
//				uint16_t firstServoSpeed = ((1023*wristRollSpeed)/100) + 1024;
//				uint16_t secondServoSpeed = ((1023*wristRollSpeed)/100) + 1024;
//            	setServoSpeed(0x02, (uint8_t)(firstServoSpeed >> 8), (uint8_t)(firstServoSpeed));
//            	setServoSpeed(0x01, (uint8_t)(secondServoSpeed >> 8), (uint8_t)(secondServoSpeed));
			}
			else if(wristRollSpeed > 0)
 80038c4:	4b60      	ldr	r3, [pc, #384]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d2:	dd3d      	ble.n	8003950 <CAN1_RX0_IRQHandler+0x4e0>
			{
				angle1-= wristRollSpeed;
 80038d4:	4b5c      	ldr	r3, [pc, #368]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	4b56      	ldr	r3, [pc, #344]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 80038dc:	ed93 7a00 	vldr	s14, [r3]
 80038e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e4:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 80038e6:	edc3 7a00 	vstr	s15, [r3]
				if(angle1 < 0)
 80038ea:	4b52      	ldr	r3, [pc, #328]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 80038ec:	edd3 7a00 	vldr	s15, [r3]
 80038f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f8:	d503      	bpl.n	8003902 <CAN1_RX0_IRQHandler+0x492>
				{
					angle1 = 0;
 80038fa:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x01, angle1);
 8003902:	4b4c      	ldr	r3, [pc, #304]	; (8003a34 <CAN1_RX0_IRQHandler+0x5c4>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	eeb0 0a67 	vmov.f32	s0, s15
 800390c:	2001      	movs	r0, #1
 800390e:	f7fe feb7 	bl	8002680 <setServoAngle>
				angle2-=wristRollSpeed;
 8003912:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <CAN1_RX0_IRQHandler+0x5d8>)
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 800391a:	ed93 7a00 	vldr	s14, [r3]
 800391e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003922:	4b45      	ldr	r3, [pc, #276]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 8003924:	edc3 7a00 	vstr	s15, [r3]
				if(angle2 < 0)
 8003928:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003936:	d503      	bpl.n	8003940 <CAN1_RX0_IRQHandler+0x4d0>
				{
					angle2 = 0;
 8003938:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
				}
				setServoAngle(0x02,angle2);
 8003940:	4b3d      	ldr	r3, [pc, #244]	; (8003a38 <CAN1_RX0_IRQHandler+0x5c8>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	eeb0 0a67 	vmov.f32	s0, s15
 800394a:	2002      	movs	r0, #2
 800394c:	f7fe fe98 	bl	8002680 <setServoAngle>
//				uint16_t secondServoSpeed = ((1023*wristRollSpeed)/100);
//            	setServoSpeed(0x01, (uint8_t)(firstServoSpeed >> 8), (uint8_t)(firstServoSpeed));
//            	setServoSpeed(0x02, (uint8_t)(secondServoSpeed >> 8), (uint8_t)(secondServoSpeed));
			}

			temp = rxMessage.Data[6];
 8003950:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <CAN1_RX0_IRQHandler+0x5d4>)
 8003952:	7c5b      	ldrb	r3, [r3, #17]
 8003954:	71fb      	strb	r3, [r7, #7]
			gripperSpeed = temp*1000/300;
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800395e:	fb02 f303 	mul.w	r3, r2, r3
 8003962:	4a3a      	ldr	r2, [pc, #232]	; (8003a4c <CAN1_RX0_IRQHandler+0x5dc>)
 8003964:	fb82 1203 	smull	r1, r2, r2, r3
 8003968:	1152      	asrs	r2, r2, #5
 800396a:	17db      	asrs	r3, r3, #31
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	b21a      	sxth	r2, r3
 8003970:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 8003972:	801a      	strh	r2, [r3, #0]
			if(gripperSpeed < 0)
 8003974:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 8003976:	881b      	ldrh	r3, [r3, #0]
 8003978:	b21b      	sxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	da29      	bge.n	80039d2 <CAN1_RX0_IRQHandler+0x562>
			{
				gripperSpeed = (-1)*gripperSpeed;
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	b21b      	sxth	r3, r3
 8003984:	b29b      	uxth	r3, r3
 8003986:	425b      	negs	r3, r3
 8003988:	b29b      	uxth	r3, r3
 800398a:	b21a      	sxth	r2, r3
 800398c:	4b30      	ldr	r3, [pc, #192]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 800398e:	801a      	strh	r2, [r3, #0]
            	GPIO_ResetBits(GPIOE, GPIO_Pin_3);
 8003990:	2108      	movs	r1, #8
 8003992:	4830      	ldr	r0, [pc, #192]	; (8003a54 <CAN1_RX0_IRQHandler+0x5e4>)
 8003994:	f7fd fcf2 	bl	800137c <GPIO_ResetBits>
                GPIO_SetBits(GPIOE, GPIO_Pin_2);
 8003998:	2104      	movs	r1, #4
 800399a:	482e      	ldr	r0, [pc, #184]	; (8003a54 <CAN1_RX0_IRQHandler+0x5e4>)
 800399c:	f7fd fcde 	bl	800135c <GPIO_SetBits>
            	GPIO_ResetBits(GPIOC, GPIO_Pin_13);
 80039a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039a4:	482c      	ldr	r0, [pc, #176]	; (8003a58 <CAN1_RX0_IRQHandler+0x5e8>)
 80039a6:	f7fd fce9 	bl	800137c <GPIO_ResetBits>
                GPIO_SetBits(GPIOC, GPIO_Pin_14);
 80039aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039ae:	482a      	ldr	r0, [pc, #168]	; (8003a58 <CAN1_RX0_IRQHandler+0x5e8>)
 80039b0:	f7fd fcd4 	bl	800135c <GPIO_SetBits>
                TIM_SetCompare3(TIM4, gripperSpeed);
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	4827      	ldr	r0, [pc, #156]	; (8003a5c <CAN1_RX0_IRQHandler+0x5ec>)
 80039be:	f7fe fa3f 	bl	8001e40 <TIM_SetCompare3>
            	TIM_SetCompare1(TIM3, gripperSpeed);
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	b21b      	sxth	r3, r3
 80039c8:	4619      	mov	r1, r3
 80039ca:	4825      	ldr	r0, [pc, #148]	; (8003a60 <CAN1_RX0_IRQHandler+0x5f0>)
 80039cc:	f7fe fa1c 	bl	8001e08 <TIM_SetCompare1>
                GPIO_ResetBits(GPIOC, GPIO_Pin_14);
                TIM_SetCompare1(TIM3, gripperSpeed);
            	TIM_SetCompare3(TIM4, gripperSpeed);
			}

			break;
 80039d0:	e029      	b.n	8003a26 <CAN1_RX0_IRQHandler+0x5b6>
                TIM_SetCompare3(TIM4, gripperSpeed);
            	TIM_SetCompare1(TIM3, gripperSpeed);
			}
			else
			{
            	GPIO_SetBits(GPIOE, GPIO_Pin_3);
 80039d2:	2108      	movs	r1, #8
 80039d4:	481f      	ldr	r0, [pc, #124]	; (8003a54 <CAN1_RX0_IRQHandler+0x5e4>)
 80039d6:	f7fd fcc1 	bl	800135c <GPIO_SetBits>
                GPIO_ResetBits(GPIOE, GPIO_Pin_2);
 80039da:	2104      	movs	r1, #4
 80039dc:	481d      	ldr	r0, [pc, #116]	; (8003a54 <CAN1_RX0_IRQHandler+0x5e4>)
 80039de:	f7fd fccd 	bl	800137c <GPIO_ResetBits>
            	GPIO_SetBits(GPIOC, GPIO_Pin_13);
 80039e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039e6:	481c      	ldr	r0, [pc, #112]	; (8003a58 <CAN1_RX0_IRQHandler+0x5e8>)
 80039e8:	f7fd fcb8 	bl	800135c <GPIO_SetBits>
                GPIO_ResetBits(GPIOC, GPIO_Pin_14);
 80039ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039f0:	4819      	ldr	r0, [pc, #100]	; (8003a58 <CAN1_RX0_IRQHandler+0x5e8>)
 80039f2:	f7fd fcc3 	bl	800137c <GPIO_ResetBits>
                TIM_SetCompare1(TIM3, gripperSpeed);
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	b21b      	sxth	r3, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	4818      	ldr	r0, [pc, #96]	; (8003a60 <CAN1_RX0_IRQHandler+0x5f0>)
 8003a00:	f7fe fa02 	bl	8001e08 <TIM_SetCompare1>
            	TIM_SetCompare3(TIM4, gripperSpeed);
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <CAN1_RX0_IRQHandler+0x5e0>)
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	b21b      	sxth	r3, r3
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4813      	ldr	r0, [pc, #76]	; (8003a5c <CAN1_RX0_IRQHandler+0x5ec>)
 8003a0e:	f7fe fa17 	bl	8001e40 <TIM_SetCompare3>
			}

			break;
 8003a12:	e008      	b.n	8003a26 <CAN1_RX0_IRQHandler+0x5b6>
		case 162:
			//Motors start/stop:
			keyTimeout = 0;
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <CAN1_RX0_IRQHandler+0x5f4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
			sendStartStop(rxMessage.Data[0]);
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <CAN1_RX0_IRQHandler+0x5d4>)
 8003a1c:	7adb      	ldrb	r3, [r3, #11]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f822 	bl	8003a68 <sendStartStop>
			break;
 8003a24:	bf00      	nop
		default:
			break;
		}
	}
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000048 	.word	0x20000048
 8003a34:	20000018 	.word	0x20000018
 8003a38:	2000001c 	.word	0x2000001c
 8003a3c:	43960000 	.word	0x43960000
 8003a40:	43960000 	.word	0x43960000
 8003a44:	20000068 	.word	0x20000068
 8003a48:	2000004c 	.word	0x2000004c
 8003a4c:	1b4e81b5 	.word	0x1b4e81b5
 8003a50:	20000050 	.word	0x20000050
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40020800 	.word	0x40020800
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000400 	.word	0x40000400
 8003a64:	2000003c 	.word	0x2000003c

08003a68 <sendStartStop>:

void sendStartStop(char isOn)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
	if(isOn != '1')
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b31      	cmp	r3, #49	; 0x31
 8003a76:	d023      	beq.n	8003ac0 <sendStartStop+0x58>
	{
    	TIM_SetCompare1(TIM2,0);
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a7e:	f7fe f9c3 	bl	8001e08 <TIM_SetCompare1>
    	TIM_SetCompare2(TIM2,0);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a88:	f7fe f9cc 	bl	8001e24 <TIM_SetCompare2>
    	TIM_SetCompare3(TIM2,0);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a92:	f7fe f9d5 	bl	8001e40 <TIM_SetCompare3>
    	TIM_SetCompare4(TIM2,0);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003a9c:	f7fe f9de 	bl	8001e5c <TIM_SetCompare4>
    	TIM_SetCompare1(TIM3,0);
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <sendStartStop+0x60>)
 8003aa4:	f7fe f9b0 	bl	8001e08 <TIM_SetCompare1>
    	TIM_SetCompare2(TIM3,0);
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <sendStartStop+0x60>)
 8003aac:	f7fe f9ba 	bl	8001e24 <TIM_SetCompare2>
    	TIM_SetCompare3(TIM4,0);
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4806      	ldr	r0, [pc, #24]	; (8003acc <sendStartStop+0x64>)
 8003ab4:	f7fe f9c4 	bl	8001e40 <TIM_SetCompare3>
    	TIM_SetCompare4(TIM4,0);
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4804      	ldr	r0, [pc, #16]	; (8003acc <sendStartStop+0x64>)
 8003abc:	f7fe f9ce 	bl	8001e5c <TIM_SetCompare4>
	}
	else
	{

	}
}
 8003ac0:	bf00      	nop
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40000400 	.word	0x40000400
 8003acc:	40000800 	.word	0x40000800

08003ad0 <SysTick_Handler>:



void SysTick_Handler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
	if(keyTimeout++ > TIMEOUT)
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <SysTick_Handler+0x68>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	4917      	ldr	r1, [pc, #92]	; (8003b38 <SysTick_Handler+0x68>)
 8003adc:	600a      	str	r2, [r1, #0]
 8003ade:	2bc8      	cmp	r3, #200	; 0xc8
 8003ae0:	dd26      	ble.n	8003b30 <SysTick_Handler+0x60>
	{
    	TIM_SetCompare1(TIM2,0);
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ae8:	f7fe f98e 	bl	8001e08 <TIM_SetCompare1>
    	TIM_SetCompare2(TIM2,0);
 8003aec:	2100      	movs	r1, #0
 8003aee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003af2:	f7fe f997 	bl	8001e24 <TIM_SetCompare2>
    	TIM_SetCompare3(TIM2,0);
 8003af6:	2100      	movs	r1, #0
 8003af8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003afc:	f7fe f9a0 	bl	8001e40 <TIM_SetCompare3>
    	TIM_SetCompare4(TIM2,0);
 8003b00:	2100      	movs	r1, #0
 8003b02:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003b06:	f7fe f9a9 	bl	8001e5c <TIM_SetCompare4>
    	TIM_SetCompare1(TIM3,0);
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	480b      	ldr	r0, [pc, #44]	; (8003b3c <SysTick_Handler+0x6c>)
 8003b0e:	f7fe f97b 	bl	8001e08 <TIM_SetCompare1>
    	TIM_SetCompare2(TIM3,0);
 8003b12:	2100      	movs	r1, #0
 8003b14:	4809      	ldr	r0, [pc, #36]	; (8003b3c <SysTick_Handler+0x6c>)
 8003b16:	f7fe f985 	bl	8001e24 <TIM_SetCompare2>
    	TIM_SetCompare3(TIM4,0);
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4808      	ldr	r0, [pc, #32]	; (8003b40 <SysTick_Handler+0x70>)
 8003b1e:	f7fe f98f 	bl	8001e40 <TIM_SetCompare3>
    	TIM_SetCompare4(TIM4,0);
 8003b22:	2100      	movs	r1, #0
 8003b24:	4806      	ldr	r0, [pc, #24]	; (8003b40 <SysTick_Handler+0x70>)
 8003b26:	f7fe f999 	bl	8001e5c <TIM_SetCompare4>
//    	sendServoCommand(0x02, WRITE, 0x05, params );
//    	enableTorque(0x02, 0x00);
//    	sendServoCommand(0x01, WRITE, 0x05, params );
//    	enableTorque(0x01, 0x00);

		keyTimeout = 0;
 8003b2a:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <SysTick_Handler+0x68>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
	}
	TimingDelay_Decrement();
 8003b30:	f000 f808 	bl	8003b44 <TimingDelay_Decrement>
}
 8003b34:	bf00      	nop
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	2000003c 	.word	0x2000003c
 8003b3c:	40000400 	.word	0x40000400
 8003b40:	40000800 	.word	0x40000800

08003b44 <TimingDelay_Decrement>:
	while(delayTimer!=0){
		;
	}
}

void TimingDelay_Decrement(void){
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	if(delayTimer>0){
 8003b48:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <TimingDelay_Decrement+0x28>)
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d006      	beq.n	8003b60 <TimingDelay_Decrement+0x1c>
		delayTimer--;
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <TimingDelay_Decrement+0x28>)
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <TimingDelay_Decrement+0x28>)
 8003b5e:	801a      	strh	r2, [r3, #0]
	}
}
 8003b60:	bf00      	nop
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	200000c8 	.word	0x200000c8

08003b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ba8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b76:	e003      	b.n	8003b80 <LoopCopyDataInit>

08003b78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b7e:	3104      	adds	r1, #4

08003b80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b80:	480b      	ldr	r0, [pc, #44]	; (8003bb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b88:	d3f6      	bcc.n	8003b78 <CopyDataInit>
  ldr  r2, =_sbss
 8003b8a:	4a0b      	ldr	r2, [pc, #44]	; (8003bb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b8c:	e002      	b.n	8003b94 <LoopFillZerobss>

08003b8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b90:	f842 3b04 	str.w	r3, [r2], #4

08003b94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b94:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b98:	d3f9      	bcc.n	8003b8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b9a:	f000 f843 	bl	8003c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b9e:	f000 f8f3 	bl	8003d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ba2:	f7fe fe99 	bl	80028d8 <main>
  bx  lr    
 8003ba6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003ba8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8003bac:	08003e04 	.word	0x08003e04
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003bb4:	20000020 	.word	0x20000020
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8003bb8:	20000020 	.word	0x20000020
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003bbc:	200000dc 	.word	0x200000dc

08003bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bc0:	e7fe      	b.n	8003bc0 <ADC_IRQHandler>
	...

08003bc4 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop

08003bd4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8003bd8:	e7fe      	b.n	8003bd8 <HardFault_Handler+0x4>
 8003bda:	bf00      	nop

08003bdc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8003be0:	e7fe      	b.n	8003be0 <MemManage_Handler+0x4>
 8003be2:	bf00      	nop

08003be4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8003be8:	e7fe      	b.n	8003be8 <BusFault_Handler+0x4>
 8003bea:	bf00      	nop

08003bec <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8003bf0:	e7fe      	b.n	8003bf0 <UsageFault_Handler+0x4>
 8003bf2:	bf00      	nop

08003bf4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop

08003c14 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop

08003c24 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c28:	4a16      	ldr	r2, [pc, #88]	; (8003c84 <SystemInit+0x60>)
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <SystemInit+0x60>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003c38:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <SystemInit+0x64>)
 8003c3a:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <SystemInit+0x64>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f043 0301 	orr.w	r3, r3, #1
 8003c42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c44:	4b10      	ldr	r3, [pc, #64]	; (8003c88 <SystemInit+0x64>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003c4a:	4a0f      	ldr	r2, [pc, #60]	; (8003c88 <SystemInit+0x64>)
 8003c4c:	4b0e      	ldr	r3, [pc, #56]	; (8003c88 <SystemInit+0x64>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <SystemInit+0x64>)
 8003c5c:	4a0b      	ldr	r2, [pc, #44]	; (8003c8c <SystemInit+0x68>)
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003c60:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <SystemInit+0x64>)
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <SystemInit+0x64>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <SystemInit+0x64>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8003c72:	f000 f80d 	bl	8003c90 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c76:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <SystemInit+0x60>)
 8003c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c7c:	609a      	str	r2, [r3, #8]
#endif
}
 8003c7e:	bf00      	nop
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	e000ed00 	.word	0xe000ed00
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	24003010 	.word	0x24003010

08003c90 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003c9e:	4a36      	ldr	r2, [pc, #216]	; (8003d78 <SetSysClock+0xe8>)
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <SetSysClock+0xe8>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003caa:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <SetSysClock+0xe8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <SetSysClock+0x38>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003cc6:	d1f0      	bne.n	8003caa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <SetSysClock+0xe8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d002      	beq.n	8003cda <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	e001      	b.n	8003cde <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d142      	bne.n	8003d6a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003ce4:	4a24      	ldr	r2, [pc, #144]	; (8003d78 <SetSysClock+0xe8>)
 8003ce6:	4b24      	ldr	r3, [pc, #144]	; (8003d78 <SetSysClock+0xe8>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003cf0:	4a22      	ldr	r2, [pc, #136]	; (8003d7c <SetSysClock+0xec>)
 8003cf2:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <SetSysClock+0xec>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cfa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003cfc:	4a1e      	ldr	r2, [pc, #120]	; (8003d78 <SetSysClock+0xe8>)
 8003cfe:	4b1e      	ldr	r3, [pc, #120]	; (8003d78 <SetSysClock+0xe8>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003d04:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <SetSysClock+0xe8>)
 8003d06:	4b1c      	ldr	r3, [pc, #112]	; (8003d78 <SetSysClock+0xe8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d0e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <SetSysClock+0xe8>)
 8003d12:	4b19      	ldr	r3, [pc, #100]	; (8003d78 <SetSysClock+0xe8>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003d1a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <SetSysClock+0xe8>)
 8003d1e:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <SetSysClock+0xf0>)
 8003d20:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003d22:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <SetSysClock+0xe8>)
 8003d24:	4b14      	ldr	r3, [pc, #80]	; (8003d78 <SetSysClock+0xe8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d2c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003d2e:	bf00      	nop
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <SetSysClock+0xe8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f9      	beq.n	8003d30 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <SetSysClock+0xf4>)
 8003d3e:	f240 7205 	movw	r2, #1797	; 0x705
 8003d42:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003d44:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <SetSysClock+0xe8>)
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <SetSysClock+0xe8>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003d50:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <SetSysClock+0xe8>)
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <SetSysClock+0xe8>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003d5c:	bf00      	nop
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <SetSysClock+0xe8>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f003 030c 	and.w	r3, r3, #12
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d1f9      	bne.n	8003d5e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	40007000 	.word	0x40007000
 8003d80:	07405419 	.word	0x07405419
 8003d84:	40023c00 	.word	0x40023c00

08003d88 <__libc_init_array>:
 8003d88:	b570      	push	{r4, r5, r6, lr}
 8003d8a:	4b0e      	ldr	r3, [pc, #56]	; (8003dc4 <__libc_init_array+0x3c>)
 8003d8c:	4c0e      	ldr	r4, [pc, #56]	; (8003dc8 <__libc_init_array+0x40>)
 8003d8e:	1ae4      	subs	r4, r4, r3
 8003d90:	10a4      	asrs	r4, r4, #2
 8003d92:	2500      	movs	r5, #0
 8003d94:	461e      	mov	r6, r3
 8003d96:	42a5      	cmp	r5, r4
 8003d98:	d004      	beq.n	8003da4 <__libc_init_array+0x1c>
 8003d9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d9e:	4798      	blx	r3
 8003da0:	3501      	adds	r5, #1
 8003da2:	e7f8      	b.n	8003d96 <__libc_init_array+0xe>
 8003da4:	f000 f816 	bl	8003dd4 <_init>
 8003da8:	4c08      	ldr	r4, [pc, #32]	; (8003dcc <__libc_init_array+0x44>)
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <__libc_init_array+0x48>)
 8003dac:	1ae4      	subs	r4, r4, r3
 8003dae:	10a4      	asrs	r4, r4, #2
 8003db0:	2500      	movs	r5, #0
 8003db2:	461e      	mov	r6, r3
 8003db4:	42a5      	cmp	r5, r4
 8003db6:	d004      	beq.n	8003dc2 <__libc_init_array+0x3a>
 8003db8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dbc:	4798      	blx	r3
 8003dbe:	3501      	adds	r5, #1
 8003dc0:	e7f8      	b.n	8003db4 <__libc_init_array+0x2c>
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	08003dfc 	.word	0x08003dfc
 8003dc8:	08003dfc 	.word	0x08003dfc
 8003dcc:	08003e00 	.word	0x08003e00
 8003dd0:	08003dfc 	.word	0x08003dfc

08003dd4 <_init>:
 8003dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd6:	bf00      	nop
 8003dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dda:	bc08      	pop	{r3}
 8003ddc:	469e      	mov	lr, r3
 8003dde:	4770      	bx	lr

08003de0 <_fini>:
 8003de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de2:	bf00      	nop
 8003de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003de6:	bc08      	pop	{r3}
 8003de8:	469e      	mov	lr, r3
 8003dea:	4770      	bx	lr
